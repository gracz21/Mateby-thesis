#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\options thesis
\use_default_options true
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "urlcolor=linkcolor,linkcolor=black,citecolor=linkcolor"
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Author
Maciej Kozłowski, Szymon Soppa, Kamil Walkowiak
\end_layout

\begin_layout Title
System wspomagający organizację i wyszukiwanie wydarzeń wśród różnorodnych
 społeczności
\end_layout

\begin_layout Date
Poznań, 2016
\end_layout

\begin_layout Supervisor
dr inż.
 Krzysztof Jankiewicz
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Wprowadzenie
\end_layout

\begin_layout Section
Motywacja
\end_layout

\begin_layout Standard
Rosnąca liczba użytkowników internetu jest główną przyczyną niezwykle dynamiczne
go rozwoju zarówno aplikacji internetowych jak i mobilnych.
 Dostęp do internetu obecnie jest możliwy w prawie każdym miejscu na ziemi.
 Implikuje to szczególne zainteresowanie urządzeniami przenośnymi będącymi
 obecnie najatrakcyjniejszą formą komunikacji internetowej.
 W celu ułatwienia i ujednolicenia procesu powstawania aplikacji internetowych
 opracowano wiele platform programistycznych, które w ogólności odpowiedzialne
 są za:
\end_layout

\begin_layout Itemize
mechanizmy funkcjonujące po stronie serwera, których zadaniem jest komunikacja
 z bazą danych oraz przetwarzanie zadań
\end_layout

\begin_layout Itemize
interfejs użytkownika, którego zadaniem jest przyjmowanie danych od użytkownika,
 komunikacja z serwerem oraz prezentacja danych
\end_layout

\begin_layout Standard
Tematyka istniejących aplikacji internetowych jest bardzo obszerna.
 Jednym z najważniejszych trendów są serwisy społecznościowe.
 Głównym powodem ich popularności jest możliwość nawiązania znajomości z
 ludźmi nie rzadko oddalonymi o tysiące kilometrów.
 Bazują one zatem na relacjach międzyludzkich.
 Cechami charakterystycznymi serwisów społecznościowych jest między innymi
 wsparcie dla tworzenia kręgu znajomych, formowania lokalnych społeczności
 oraz organizacji wydarzeń.
 Pomimo wielu korzyści wynikających z możliwości wykorzystania tego typu
 aplikacji, można zaobserwować, że coraz więcej osób rezygnuje ze spędzenia
 czasu we wspólnym gronie na rzecz rozmowy za pomocą komunikatora społecznościow
ego.
 Z tego powodu ogromne znaczenie w dzisiejszych czasach mają serwisy służące
 do organizacji wydarzeń, które zachęcają do przebywania poza domem oraz
 budują rzeczywiste relacje międzyludzkie.
 Obecnie najpopularniejszą aplikacją tego typu jest Facebook, która posiada
 ogromną liczbę użytkowników oraz bardzo obszerną bazę wydarzeń.
 Niestety serwis ten udostępnia mało szczegółowy mechanizm sparametryzowanego
 wyszukiwania.
 Istnieje również kilka rozwiązań alternatywnych takich jak Eventbrite czy
 Nearify, które implementują taką funkcjonalność, jednak są to typowe serwisy
 informacyjne, a nie społecznościowe.
 Z drugiej strony istotne jest również oddzielenie zwykłego użytkownika
 od instytucji, takich jak kluby, teatr czy koła tematyczne.
 Instytucje miałyby możliwość zarządzania swoimi oddziałami oraz przeglądania
 ich statystyk.
 Ułatwi to wprowadzanie zmian w ofercie wydarzeń jak i polepszy stosunek
 między organizatorem a uczestnikiem.
 Serwis społecznościowy umożliwiający organizowanie oraz wyszukiwanie wydarzeń
 powinien zatem dawać możliwość:
\end_layout

\begin_layout Itemize
elastycznego wyszukiwania
\end_layout

\begin_layout Itemize
integracji z innymi serwisami społecznościowymi
\end_layout

\begin_layout Itemize
możliwość formowania grup społecznościowych
\end_layout

\begin_layout Itemize
łatwego zarządzania oddziałami firm tworzących wydarzenia oraz przeglądania
 zbiorczych statystyk
\end_layout

\begin_layout Standard
W ramach tej pracy inżynierskiej powstanie zarówno aplikacja internetowa
 jak i mobilna, które we współpracy z serwerem będą posiadały wyżej wymienione
 funkcje.
 
\end_layout

\begin_layout Section
Cel i zakres pracy
\end_layout

\begin_layout Standard
Celem pracy jest projekt i implementacja aplikacji społecznościowej umożliwiając
ej wyszukiwanie sparametryzowanych wydarzeń wśród lokalnych społeczności,
 zachęcającej tym samym do spędzania czasu we wspólnym gronie.
\end_layout

\begin_layout Standard
Na ten cel ogólny składają się następujące cele szczegółowe:
\end_layout

\begin_layout Itemize
dokonanie przeglądu istniejących aplikacji o podobnej tematyce --- wyszukanie
 i porównanie będących na rynku aplikacji o podobnym przeznaczeniu, ukazując
 wyróżniające aspekty naszej aplikacji
\end_layout

\begin_layout Itemize
dokonanie przeglądu dostępnych technologii i platform programistycznych
 --- wyszukanie i porównanie technologii umożliwiających stworzenie bazy
 danych, logiki serwera, a także aplikacji internetowej oraz mobilnej
\end_layout

\begin_layout Itemize
zintegrowanie narzędzi inżynierii oprogramowania --- przedstawienie wykorzystani
a narzędzi takich jak narzędzie agile’owe Pivotal Tracker służące zarzadzaniu
 projektem, system kontroli wersji git, system ciągłej integracji CircleCI,
 komunikator Slack w celu komunikacji wewnątrz zespołowej oraz serwer przedprodu
kcyjny na platformie Heroku 
\end_layout

\begin_layout Itemize
sprecyzowanie wymagań funkcjonalnych i pozafunkcjonalnych --- wypisanie
 i analiza funkcjonalności aplikacji, w celu określenia priorytetu oraz
 uniknięcia sytuacji powstania wymagań sprzecznych lub zbędnych oraz określenie
 założeń co do jakości oferowanych usług
\end_layout

\begin_layout Itemize
zaprojektowanie interfejsu aplikacji --- ukazanie oczekiwanego wyglądu aplikacji
 internetowej oraz mobilnej, poprzez przedstawienie grafik z odpowiednimi
 widokami ekranów 
\end_layout

\begin_layout Itemize
zaprojektowanie bazy danych --- stworzenie modelu związków-encji oraz jego
 transformacja do modelu relacyjnego 
\end_layout

\begin_layout Itemize
zaimplementowanie logiki serwera aplikacji --- implementacja funkcjonalności
 serwera dla aplikacji internetowej i mobilnej 
\end_layout

\begin_layout Itemize
zaimplementowanie aplikacji internetowej --- stworzenie w pełni zgodnego
 z wymaganiami funkcjonalnymi serwisu internetowego 
\end_layout

\begin_layout Itemize
zaimplementowanie aplikacji mobilnej --- stworzenie w pełni zgodnej z wymaganiam
i funkcjonalnymi aplikacji mobilnej 
\end_layout

\begin_layout Itemize
testy aplikacji --- napisanie i przedstawienie testów jednostkowych logiki
 serwera i aplikacji mobilnej.
\end_layout

\begin_layout Section
Struktura pracy
\end_layout

\begin_layout Standard
Struktura pracy jest następująca.
 Rozdział
\begin_inset space ~
\end_inset

2.
 zawiera przegląd istniejących aplikacji o podobnej tematyce.
 Opisano w nim wady i zalety poszczególnych rozwiązań.
 W
\begin_inset space ~
\end_inset

rozdziale
\begin_inset space ~
\end_inset

3.
 dokonano przeglądu dostępnych technologii, które mogą być wykorzystywane
 w procesie implementacji aplikacji.
 Przyjrzano się rozwiązaniom wspomagającym projektowanie i tworzenie bazy
 danych oraz platformom programistycznym wspierającym implementację zarówno
 logiki serwera, jak i aplikacji internetowej oraz mobilnej.
 Na
\begin_inset space ~
\end_inset

koniec uzasadniony został wybór zastosowanych technologii.
 W
\begin_inset space ~
\end_inset

rozdziale
\begin_inset space ~
\end_inset

4.
 przedstawiono wykorzystane narzędzia inżynierii oprogramowania.
 Opisano użyty system kontroli wersji, narzędzie wspomagające pracę w metodykach
 zwinnych, system ciągłej integracji oraz komunikator ułatwiający komunikację
 wewnątrz zespołową.
 Na
\begin_inset space ~
\end_inset

koniec omówiono wykorzystany serwer produkcyjny.
 W
\begin_inset space ~
\end_inset

rozdziale
\begin_inset space ~
\end_inset

5.
 omówiono projekt aplikacji.
 Opisano wymagania funkcjonalne, które powinna spełniać tworzona aplikacja
 oraz przedstawiono projekt interfejsu aplikacji.
 Przedstawiono bazę danych zaprojektowaną na potrzeby implementowanej aplikacji.
 Omówiono schemat związków-encji oraz jego transformację do schematu relacyjnego.
 W
\begin_inset space ~
\end_inset

rozdziale
\begin_inset space ~
\end_inset

6.
 przybliżono sposób implementacji aplikacji.
 Omówiono w nim implementację logiki serwera, a w szczególności bazy danych.
 Przedstawiono 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
interfejs programistyczny aplikacji
\end_layout

\end_inset

 --- 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
API
\end_layout

\end_inset

 (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Application Programming Interface
\end_layout

\end_inset

) który umożliwia komunikację serwera z aplikacją internetową i mobilną.
 Opisany został także zaimplementowany system autoryzacji oparty na standardzie
 OAuth2.
 Przyjrzano się sposobowi testowania API.
 Przedstawiono sposób implementacji aplikacji internetowej oraz mobilnej
 dla urządzeń pracujących pod kontrolą systemu Android.
 Rozdział
\begin_inset space ~
\end_inset

7.
 stanowi podsumowanie pracy.
\end_layout

\begin_layout Section
Podział pracy
\end_layout

\begin_layout Chapter
Przegląd aplikacji o podobnej tematyce
\end_layout

\begin_layout Standard
Obecnie istnieje wiele aplikacji umożliwiających formowanie grup społecznych
 czy też organizację wydarzeń, dlatego ich przegląd jest niezwykle istotny
 w procesie definiowania wymagań funkcjonalnych aplikacji.
 Do najważniejszych cech składających się na końcową ocenę serwisu należą
\end_layout

\begin_layout Itemize
zakres funkcjonalności
\end_layout

\begin_layout Itemize
liczba unikalnych użytkowników na dzień na stronie internetowej 
\begin_inset Foot
status open

\begin_layout Plain Layout
Dane pochodzące ze strony 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
http://www.speedtest.pl/wycena
\end_layout

\end_inset

 z dnia 6.01.2016 roku.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
liczba pobrań i ocena użytkowników jakości aplikacji mobilnej 
\begin_inset Foot
status open

\begin_layout Plain Layout
Dane pochodzące ze strony 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
https://play.google.com
\end_layout

\end_inset

 z dnia 6.01.2016 roku.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Główną tematyką przeglądu jest organizacja wydarzeń oraz formowanie grup
 społecznościowych według podobnych zainteresowań.
 Bardzo istotnym elementem jest również stopień w jakim poszczególne serwisy
 zachęcają użytkowników do wspólnego spędzenia czasu.
 Przegląd obejmuje zarówno strony internetowe jak i aplikacje mobilne.
\end_layout

\begin_layout Paragraph
allevents.in
\end_layout

\begin_layout Standard
\align left
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unikalni użytkownicy na dzień
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
77 529
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liczba pobrań aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100 000 - 500 000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ocena jakości aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4,0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset

Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset

 jest portalem o charakterze informacyjnym.
 Jego twórcami są: Amit Panchal oraz Ruchit Patel, których celem było stworzenie
 aplikacji ułatwiającej znalezienie wydarzeń z okolicy.
 Portal ten posiada bardzo obszerną bazę wydarzeń, które przynależą do konkretny
ch kategorii.
 Obecnie zasięg tej aplikacji obejmuje aż 30 tysięcy miast co oznacza, że
 nie ogranicza się do konkretnego regionu.
 Opis poszczególnych wydarzeń jest szczegółowy oraz posiada możliwość podzieleni
a się informacją na jego temat w mediach społeczniościowych.
 Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset

 udostępnia również płatne plany promocji wydarzeń przeznaczone dla organizatoró
w.
 Do najważniejszych funkcji tej platformy można zaliczyć:
\end_layout

\begin_layout Itemize
\align left
szczegółowe wyszukiwanie wydarzeń uwzględniające takie parametry jak: przynależn
ość do kategorii, nazwa, data, itp
\end_layout

\begin_layout Itemize
\align left
integracja z zewnętrznym serwisem społecznościowym Facebook
\end_layout

\begin_layout Itemize
\align left
możliwość tworzenia wydarzeń bez rejestracji
\end_layout

\begin_layout Itemize
\align left
możliwość promocji utworzonych wydarzeń
\end_layout

\begin_layout Standard
\align left
Portal 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset

 jest zatem bardzo rozbudowanym serwisem umożliwiającym wyszukiwanie wydarzeń,
 jednak w bardzo małym stopniu wspiera interakcję między użytkownikami.
 Nie jest to zatem serwis społecznościowy a informacyjny, którego celem
 jest przekazanie szczegółów dotyczących organizowanych wydarzeń w okolicy.
 Obecnie kanałami dostępu tego portalu jest aplikacja internetowa oraz aplikacja
 mobilna przeznaczona na system Android oraz iOS.
\end_layout

\begin_layout Paragraph
skilltrade.org 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
skilltrade.org
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unikalni użytkownicy na dzień
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 055
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liczba pobrań aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ocena jakości aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3,2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset

Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
skilltrade.org
\end_layout

\end_inset

 jest od niedawna istniejącym portalem społecznościowym.
 Jej założycielami jest dwóch polaków: Maciej Gliński oraz Wojciech Marciniak,
 którzy w celu przetestowania potencjalnego zainteresowania utworzyli specjalne
 grupy za pośrednictwem serwisu Facebook, oferujące swoim członkom wymianę
 umiejętności.
 Zainteresowanie okazało się na tyle duże, że postanowili stworzyć osobną
 platformę, która obecnie zyskuje coraz większą popularność.
 Każdy użytkownik tego portalu określa swoje zdolności oraz deklaruje umiejętnoś
ci, które chciałby zdobyć.
 Można zatem powiedzieć, że oferowana tutaj wymiana umiejętności polega
 na spotkaniu dwóch osób, które uczą się nawzajem bez żadnych opłat.
 Do najważniejszych funkcji tej platformy można zaliczyć:
\end_layout

\begin_layout Itemize
integracje z zewnętrznymi serwisami społecznościowymi
\end_layout

\begin_layout Itemize
wyszukiwanie osób o podobnych zainteresowaniach
\end_layout

\begin_layout Itemize
formowanie społeczności
\end_layout

\begin_layout Standard
Pomimo, iż serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
skilltrade.org
\end_layout

\end_inset

 nie bazuje na modelu wydarzeń, można uznać, że w dużym stopniu zachęca
 do spędzania czasu z innymi ludźmi.
 Dla wielu osób taki sposób poznawania ludzi jest interesujący jednak brak
 możliwości organizowania grupowych spotkań jest niewątpliwie wadą.
 Obecnie kanałami dostępu tego portalu jest aplikacja internetowa oraz aplikacja
 mobilna przeznaczona na system Android.
\end_layout

\begin_layout Paragraph
eventbrite.com
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
eventbrite.com
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unikalni użytkownicy na dzień
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
977 384
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liczba pobrań aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 000 000 - 5 000 000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ocena jakości aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4,3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
eventbrite.com
\end_layout

\end_inset

 jest obecnie największym portalem informacyjnym związanym z tematyką wydarzeń.
 Jego twórcami są: Kevin Hartz, Renaud Visage oraz Julia Hartz.
 Jego funkcjonowanie bardzo przypomina portal 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset

 ponieważ również umożliwia wyszukiwanie wydarzeń według podanych kategorii
 oraz istotnych parametrów.
 Bardzo ciekawym urozmaiceniem jest możliwość zakupu biletów za pośrednictwem
 tego serwisu, na wydarzenie w którym chce się uczestniczyć.
 Widok wydarzenia zawiera podstawowe informacje jak i możliwość podzielenia
 się jego szczegółami poprzez media społecznościowe.
 Do najważniejszych funkcji tej platformy można zaliczyć:
\end_layout

\begin_layout Itemize
\align left
szczegółowe wyszukiwanie wydarzeń uwzględniające takie parametry jak: przynależn
ość do kategorii, nazwa, data, itp
\end_layout

\begin_layout Itemize
\align left
integracja z zewnętrznymi serwisami społecznościowymi, takimi jak: Facebook,
 Instagram czy Twitter
\end_layout

\begin_layout Itemize
\align left
możliwość tworzenia wydarzeń po obowiązkowej rejestracji
\end_layout

\begin_layout Itemize
\align left
możliwość zakupienia biletu na wydarzenie
\end_layout

\begin_layout Standard
Funkcjonalność oraz działanie tego serwisu jest zatem bardzo zbliżona do
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset

.
 Również jest to portal informacyjny, który nie posiada wsparcia dla formowania
 społeczności oraz poznawania nowych ludzi.
 Obecnie kanałami dostępu tego portalu jest aplikacja internetowa oraz aplikacja
 mobilna przeznaczona na system Android, iOS oraz Windows Phone.
\end_layout

\begin_layout Paragraph
facebook.com
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
facebook.com
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unikalni użytkownicy na dzień
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
242 676 051
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liczba pobrań aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 000 000 000 - 5 000 000 000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ocena jakości aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4,0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
facebook.com
\end_layout

\end_inset

 jest obecnie najbardziej popularnym portalem społecznościowym na świecie.
 Jego twórcą jest Mark Zuckerberg, którego początkowym pomysłem było stworzenie
 aplikacji umożliwiającej tworzenie sieci znajomości.
 Na przestrzeni lat serwis ten rozrósł się do tego stopnia, że obecnie liczba
 jego użytkowników przekracza miliard.
 Rozwój funkcjonalności tego serwisu opiera się na wprowadzaniu kolejnych
 sposobów na integrację użytkowników.
 W ten sposób powstała między innymi możliwość tworzenia wydarzeń publicznych
 jak i prywatnych, na które można zaprosić zarówno znajomych jak i osoby
 nam całkowicie obce.
 Każdy użytkownik ma również możliwość stworzenia swojej strony wewnątrz
 serwisu, która może reprezentować chociażby instytucję.
 Jest to pewien sposób promocji, utrzymywania kontaktu ze społecznością
 oraz przekazania niezbędnych informacji.
 Do najważniejszych funkcji tej platformy można zaliczyć:
\end_layout

\begin_layout Itemize
możliwość tworzenia społeczności wewnątrz serwisu
\end_layout

\begin_layout Itemize
możliwość tworzenia wydarzeń publicznych oraz prywatnych po obowiązkowej
 rejestracji
\end_layout

\begin_layout Itemize
możliwość utworzenia strony tematycznej
\end_layout

\begin_layout Itemize
integracja z wieloma serwisami społecznymi
\end_layout

\begin_layout Standard
Serwis społecznościowy
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
facebook.com
\end_layout

\end_inset

 na przestrzeni lat bardzo rozwinął swoją funkcjonalność, przez co stał
 się największym portalem społecznościowym na świecie.
 Pomimo wsparcia dla organizacji wydarzeń posiada dość wyraźną wadę, którą
 jest mało szczegółowe wyszukiwanie, przyjmujące jako parametr jedynie nazwę.
 Prawdopodobnie jest to powodem dla którego powstało wiele rozwiązań konkurencyj
nych, oferujących tylko samo wyszukiwanie.
 Obecnie kanałami dostępu tego portalu jest aplikacja internetowa oraz aplikacja
 mobilna przeznaczona na system Android, iOS oraz Windows Phone.
\end_layout

\begin_layout Paragraph
nearify.com
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
nearify.com
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unikalni użytkownicy na dzień
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 326
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liczba pobrań aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50 000 - 100 000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ocena jakości aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4,4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
nearify.com
\end_layout

\end_inset

 jest kolejnym portalem o charakterze informacyjnym.
 Jego założycielami są: Mayank Kumar, Saurav Singh oraz Vivek Srivastava.
 Serwis ten jest stale rozwijany w kierunku udoskonalenia przeszukiwania
 wydarzeń.
 Posiada ciekawą funkcjonalność informowania o pojawieniu się wydarzeń będących
 w kręgu zainteresowań użytkownika.
 Funkcjonowanie samego portalu przypomina zarówno 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset

 jak i 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
eventbrite.com
\end_layout

\end_inset

.
 Do najważniejszych funkcji tego serwisu można zaliczyć:
\end_layout

\begin_layout Itemize
\align left
szczegółowe wyszukiwanie wydarzeń uwzględniające takie parametry jak: przynależn
ość do kategorii, nazwa, data, itp
\end_layout

\begin_layout Itemize
\align left
integracja z zewnętrznym serwisem społecznościowym Facebook
\end_layout

\begin_layout Itemize
\align left
możliwość tworzenia wydarzeń bez rejestracji
\end_layout

\begin_layout Itemize
\align left
informowanie o nowych wydarzeniach z kręgu zainteresowań użytkownika
\end_layout

\begin_layout Standard
Pomimo zalet wynikających z możliwości szczegółowego wyszukiwania wydarzeń
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
nearify.com
\end_layout

\end_inset

 nie posiada wielu funkcji, które odróżniały by go od pozostałych rozwiązań
 tego typu.
 Jest to pewna alternatywa dla 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
allevents.in
\end_layout

\end_inset

 i 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
eventbrite.com
\end_layout

\end_inset

.
 Obecnie kanałami dostępu tego portalu jest aplikacja internetowa oraz aplikacja
 mobilna przeznaczona na system Android i iOS.
\end_layout

\begin_layout Paragraph
coigdzie.pl
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
coigdzie.pl
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unikalni użytkownicy na dzień
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
219
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liczba pobrań aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 000 - 50 000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ocena jakości aplikacji mobilnej
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4,2
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
coigdzie.pl
\end_layout

\end_inset

 jest jedynym polskim portalem informacyjnym w tym przeglądzie.
 Jest to ciekawe rozwiązanie, które udostępnia informacje na temat wydarzeń
 wyłącznie z Polski.
 Bardzo istotnym elementem tego portalu jest bogata baza repertuarów spektakli
 z teatrów oraz kin.
 Z tego powodu współpracuje z innymi serwisami informacyjnymi w Polsce,
 którym udostępnia informacje kulturowe.
 Można tutaj znaleźć również wydarzenia sportowe oraz wszelkiego rodzaju
 imprezy.
 Najważniejszą funkcjonalnością tego serwisu jest możliwość wyszukiwania
 wydarzeń według istotnych kryteriów takich jak kategorie, nazwa lub data.
\end_layout

\begin_layout Standard
Serwis 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
coigdzie.pl
\end_layout

\end_inset

 jest zatem kolejnym portalem informacyjnym umożliwiającym wyszukiwanie
 wydarzeń.
 Jego funkcjonalność nie jest zbyt rozbudowana jednak jego współpraca z
 innymi portalami pokazuje, że w Polsce również istnieje zapotrzebowanie
 na przekazanie informacji dotyczących wydarzeń z okolicy.
 Obecnie kanałami dostępu tego portalu jest aplikacja internetowa oraz aplikacja
 mobilna przeznaczona na system Android i Windows Phone.
\end_layout

\begin_layout Paragraph
Podsumowanie
\end_layout

\begin_layout Standard
Przegląd dostępnych aplikacji o podobnej tematyce wykazał, iż istnieje wiele
 różnych rozwiązań bazujących głównie na przeglądzie wydarzeń według ich
 kategorii oraz miejsca.
 Większość z nich współpracuje z innymi portalami społecznościowymi upraszczając
 w ten sposób proces rejestracji lub tworzenia nowych wydarzeń.
 Warto jednak zauważyć, że każda z wyżej wymienionych aplikacji posiada
 pewne wady, wśród których najczęściej pojawia się brak możliwości tworzenia
 społeczności wewnątrz serwisu oraz mało szczegółowy i funkcjonalny widok
 wydarzenia.
 
\end_layout

\begin_layout Standard
W celu zachęcenia użytkowników do nawiązywania rzeczywistych relacji należy
 stworzyć aplikację, która w dużym stopniu bazować będzie na interakcji
 międzyludzkiej.
 Ponadto przy ogromnej liczbie użytkowników serwisów społecznościowych,
 aplikacja powinna zapewnić wysoki poziom integracji z tymi portalami.
 Warto również wprowdzić zawansowaną opcję wyszkiwania oraz rozbudowany
 widok wydarzenia, szczegółowy opisujący dane dotyczące jego przebiegu.
\end_layout

\begin_layout Chapter
Przegląd dostępnych technologii i platform programistycznych
\end_layout

\begin_layout Standard
Zastosowanie właściwych technologii i platform programistycznych pozwala
 zminimalizować konieczność wprowadzenia kosztownych zmian w przyszłości.
 Przed podjęciem odpowiedniego wyboru należy wykonać przegląd dostępnych
 technologii.
 W tym celu powinno się zdefiniować wspólne własności, które są istotne
 dla poszczególnych składowych całej aplikacji czyli: bazy danych, logiki
 serwera, aplikacji internetowej oraz aplikacji mobilnej.
 Tymi własnościami są:
\end_layout

\begin_layout Itemize
Z punktu widzenia programisty:
\end_layout

\begin_deeper
\begin_layout Itemize
paradygmat programowania --- im bardziej popularny tym większa liczba narzędzi
 programistycznych
\end_layout

\begin_layout Itemize
liczba dostępnych bibliotek programistycznych --- większa liczba zapewnia
 krótszy czas wytworzenia oprogramowania
\end_layout

\end_deeper
\begin_layout Itemize
Z punktu widzenia programisty oraz użytkownika:
\end_layout

\begin_deeper
\begin_layout Itemize
wydajność --- większa wydajność zapewnia krótszy czas odpowiedzi oraz większa
 płynność działania
\end_layout

\begin_layout Itemize
integracja z innymi technologiami --- zapewnia efektywniejszy rozwój oprogramowa
nia
\end_layout

\end_deeper
\begin_layout Itemize
Z punktu widzenia wartości biznesowej istotny jest czas wytworzenia oprogramowan
ia, który związany jest z nakładem pracy i środków
\end_layout

\begin_layout Standard
Powyższe własności są bardzo istotne dlatego też stanowią główny odnośnik
 w porównaniu platform.
\end_layout

\begin_layout Section
Baza danych
\end_layout

\begin_layout Standard
Najważniejszym decyzją jaką należało podjąć był wybór pomiędzy relacyjną,
 a obiektową bazą danych.
 Systemy obiektowych baz danych są dobrze przystosowane do obsługi danych
 mających złożoną, zagnieżdżoną strukturę, tworzących hierarchię, czy też
 dynamicznie zmieniających rozmiar.
 Podczas gdy relacyjne bazy danych dobrze sprawdzają się w zastosowaniach
 wykorzystujących proste, nie zagnieżdżone dane, dające się łatwo umieścić
 w tablicy.
 W przeglądzie umieściliśmy po dwa przykłady dla obu typów baz danych.
\end_layout

\begin_layout Subsection
SQLite
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Baza danych SQLite
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Napisana w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
typ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowe
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
elastyczność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
format danych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
MongoDB
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Baza danych MongoDB
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Napisana w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
typ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
relacyjne
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
elastyczność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
format danych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
das
\end_layout

\begin_layout Subsection
PostgreSQL
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Baza danych PostgreSQL
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Napisana w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
typ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowe
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
elastyczność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
format danych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
das
\end_layout

\begin_layout Subsection
Cassandra
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Baza danych Cassandra
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Napisana w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
typ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
relacyjne
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
elastyczność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
format danych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
xxx
\end_layout

\begin_layout Section
Logika serwera
\end_layout

\begin_layout Standard
Zarówno aplikacja internetowa jak i mobilna korzysta z tych samych zasobów,
 które przechowywane są w bazie danych.
 Mechanizm, który pośredniczy w procesie zwracania oraz modyfikacji danych
 nazywa się serwerem.
 Jego głównym zadaniem jest odbieranie zapytań od aplikacji klienckich,
 komunikacja z bazą danych oraz zwracanie odpowiednich zasobów w odpowiedzi.
 Jest również wykorzystywany do wykonywania okresowych procedur.
 W przeglądzie platform implementujących logikę serwera wzięto pod uwagę
 technologie oparte na językach: Ruby, Elixir, PHP oraz JavaScript.
 Wybór tych technologii został podyktowany przez trendy pojawiające się
 na przestrzeni ostatnich lat.
 Zostały także uwzględnione różnorodności wykorzystywanych języków oraz
 paradygmatów programowania.
\end_layout

\begin_layout Subsection
Ruby on Rails - język Ruby
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Ruby on Rails
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ruby on Rails v4.2.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2004
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradygmat programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
liczba dostępnych bibliotek programistycznych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 100 000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przeciętna
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integracja z innymi technologiami
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bardzo duża
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Platforma Ruby on Rails oparta jest na wzorcu projektowym MVC
\begin_inset Foot
status open

\begin_layout Plain Layout
MVC (ang.
 Model-View-Controller) - model-widok-kontroler, wzorzec architektoniczny
 który zakłada istnienie trzech połączonych ze sobą składowych: modelu,
 widoku oraz kontrolera.
\end_layout

\end_inset

.
 Jej głównymi zaletami są: dobra dokumentacja, duża liczba bibliotek programisty
cznych oraz niski koszt i krótki czas wytworzenia oprogramowania.
 Główną ideą jest tutaj podążanie za konwencjami, dzięki którym programista
 nie musi zwracać uwagi na konfigurację.
 W większości przypadków konwencje te wiążą się z umieszczaniem plików w
 określonym folderze narzuconej struktury projektu oraz odpowiednim nazewnictwem
 plików i zmiennych w kodzie.
 Dzięki temu platforma sama skonfiguruje projekt w celu jego przetwarzania.
 Umożliwia to znacznie szybszy proces tworzenia aplikacji co jest szczególnie
 istotne dla przedsiębiorstw poszukujących modelu biznesowego oraz nastawionych
 na dynamiczny rozwój.
 Platforma Ruby on Rails została zbudowana w celu tworzenia pełnych aplikacji
 internetowych co oznacza, że nie jest nie tylko odpowiedzialna za logikę
 serwera ale i również za zwracanie widoków aplikacji.
 Nie jest to jednak wymagane i obecnie coraz częściej oddziela się całkowicie
 serwer od aplikacji internetowej po stronie klienta.
 Warto również zwrócić uwagę na przeciętną wydajność platformy.
 Powodem tego jest wydajność języka Ruby, który jest interpretowany, nastawiony
 na wysoką produktywność, a tym samym prostą implementację.
 Niestety wszystkie te zalety wiążą się w tym przypadku z wyższym czasem
 przetwarzania.
 
\end_layout

\begin_layout Subsection

\series bold
Phoenix
\series default
 - język Elixir
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Phoenix
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Phoenix v1.1.0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2014
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradygmat programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
funkcyjny
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
liczba dostępnych bibliotek programistycznych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 1000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integracja z innymi technologiami
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przeciętna
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
średni
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Platforma Phoenix również oparta jest na wzorcu MVC.
 Reprezentuje ona całkiem inny paradygmat programowania - funkcyjny, który
 kładzie duży nacisk na rekurencję oraz funkcje wyższego rzędu
\begin_inset Foot
status open

\begin_layout Plain Layout
Funkcje wyższego rzędu - funkcje przyjmujące jako parametr lub zwracające
 inne funkcje.
\end_layout

\end_inset

.
 Została zbudowana na bazie języka Elixir uruchamianego na wirtualnej maszynie
 Erlanga.
 Tak jak Ruby on Rails, pozwala na tworzenie pełnych aplikacji internetowych.
 Wysoka wydajność tego języka wiąże się między innymi ze współbieżnością,
 którą można zaimplementować małym kosztem.
 Niestety jest to stosunkowo młoda platforma, co oznacza niskie wsparcie
 programistyczne oraz małą społeczność.
\end_layout

\begin_layout Subsection

\series bold
Laravel
\series default
 - język PHP
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Laravel
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Laravel v5.1.11
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradygmat programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
liczba dostępnych bibliotek programistycznych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 1000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przeciętna
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integracja z innymi technologiami
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Platforma Laravel jest jednym z najpopularniejszych platform opartych na
 języku PHP.
 Jej struktura nieco przypomina Ruby on Rails - również używa wzorca MVC
 oraz preferowana jest konwencja nad konfiguracją.
 Wydajność aplikacji stworzonej za pomocą standardowego generatora jest
 przeciętna.
 Wiążę się to między innymi z dużą ilością zależności od innych bibliotek.
 Niewątpliwie zaletą jest tutaj zastosowany język PHP, który na przestrzeni
 wielu lat został znacznie przyspieszony.
 Istnieje również duża społeczność związana z tą technologią jak i samym
 językiem PHP, który został opracowany w roku 1995.
 Platforma pozwala na tworzenie pełnych aplikacji internetowych.
\end_layout

\begin_layout Subsection

\series bold
Meteor
\series default
 - język JavaScript
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Meteor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meteor v1.2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradygmat programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
liczba dostępnych bibliotek programistycznych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 1000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integracja z innymi technologiami
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
średnia
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Platforma Meteor reprezentuje całkowicie inne podejście.
 Jest oparta na środowisku programistycznym Node.js które to z kolei zbudowane
 zostało na bazie języka JavaScript.
 Główną zaletą tej platformy jest synchronizacja danych czasu rzeczywistego
 między klientem a serwerem.
 Oznacza to, że zmiany wprowadzone na jednym kliencie zostaną zaobserwowane
 na wszystkich powiązanych klientach.
 Ponadto jest to platforma skalowalna.
 Wadą jest natomiast stosunkowo mała liczba dostępnych bibliotek.
 Pomimo, iż aplikację można napisać w bardzo krótkim czasie to wprowadzenie
 brakującej lub niekonwencjonalnej funkcjonalności skutkuje dużym wkładem
 pracy.
 Platforma Meteor również pozwala na tworzenie zarówno logiki serwera jak
 i widoków aplikacji internetowej po stronie klienta.
\end_layout

\begin_layout Section
Aplikacja internetowa po stronie klienta
\end_layout

\begin_layout Standard
Głównymi składowymi każdej strony internetowej są dane oraz ich prezentacja.
 W celu ułatwienia procesu wymiany zasobów w internecie używa się serwerów
 współpracujących z bazami danych.
 Połączenie aplikacji klienckiej (do której ma dostęp użytkownik za pomocą
 przeglądarki) z serwerem nazywa się aplikacją internetową.
 Obecnie wiele rozwiązań zakłada oddzielenie logiki od prezentacji.
 W tym celu powstaje serwer jako niezależny mechanizm komunikacji z bazą
 danych oraz aplikacja kliencka odpowiedzialna za przedstawienie danych
 i interakcję z użytkownikiem.
 Wśród dostępnych platform wspierających implementację aplikacji internetowych
 po stronie klienta zdecydowanie dominują rozwiązania oparte na SPA
\begin_inset Foot
status open

\begin_layout Plain Layout
SPA (ang.
 Single-page application) --- aplikacja internetowa, która mieści się na
 jednej stronie.
\end_layout

\end_inset

.
 Obecne technologie używają języka JavaScript wraz z HTML
\begin_inset Foot
status open

\begin_layout Plain Layout
HTML (ang.
 HyperText Markup Language) --- obecnie najczęściej używany hipertekstowy
 język znaczników.
\end_layout

\end_inset

 oraz CSS
\begin_inset Foot
status open

\begin_layout Plain Layout
CSS (ang.
 Cascading Style Sheets) --- język służący do definiowania formy prezentacji
 strony internetowej.
\end_layout

\end_inset

.
 Tego typu rozwiązań jest bardzo dużo dlatego wybór został podyktowany przez
 trendy ostatnich lat oraz popularność poszczególnych platform.
\end_layout

\begin_layout Subsection
Backbone
\end_layout

\begin_layout Standard
\align left
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Backbone
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Backbone v1.2.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2010
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradygmat programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
liczba dostępnych bibliotek programistycznych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 100
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integracja z innymi technologiami
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
średnia
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Platforma Backbone skierowana jest dla programistów poszukujących biblioteki
 o małym rozmiarze z dużą funkcjonalnością.
 W porównaniu z innymi platformami posiada małą liczba powiązanych bibliotek
 programistycznych jednak w większości rozwiązań są one wystarczające.
 Posiada również konwencje, które mogą przyspieszyć proces wytwarzania oprogramo
wania.
 Wadą jest konieczność nauczenia się umiejętności połączenia wszystkich
 modułów w taki sposób aby ze sobą współpracowały.
 Jest to zatem solidna a zarazem lekka platforma, która ułatwia organizację
 kodu JavaScript oraz nie ogranicza programisty przez narzucone schematy.
\end_layout

\begin_layout Subsection
Angular
\end_layout

\begin_layout Standard
\align left
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Angular
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Angular v1.4.8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2009
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradygmat programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
liczba dostępnych bibliotek programistycznych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 1000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integracja z innymi technologiami
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bardzo duża
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Platforma Angular wspierana jest przez firmę Google co w znacznym stopniu
 zadecydowało o jej popularności wśród programistów.
 Powstała w 2009 roku czego efektem jest duża liczba dostępnych bibliotek,
 które pozwalają na łatwą integrację z innymi technologiami.
 Jest zarazem wydajna jak i stosunkowo nie wielka.
 Programiści pracują nad nową wersją tej platformy, która nie będzie wspierała
 wersji obecnej.
 Można zatem powiedzieć, że w tej chwili Angular jest w niekorzystnej fazie
 rozwojowej co jest niewątpliwie bardzo ważnym aspektem przy wyborze platformy
 dla nowego projektu.
 
\end_layout

\begin_layout Subsection
Ember
\end_layout

\begin_layout Standard
\align left
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Ember
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ember v1.3.18
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradygmat programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
obiektowy
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
liczba dostępnych bibliotek programistycznych
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
> 1000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integracja z innymi technologiami
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bardzo duża
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ember to platforma która w swej idei przypomina Ruby on Rails.
 Posiada wiele konwencji które pozwalają na znaczne przyspieszenie pracy
 jednak przez to narzucają również pewne schematy.
 Posiada obszerne wsparcie bibliotek programistycznych które dla nowszych
 wersji platformy nie tracą kompatybilności wstecz.Wadą jest stosunkowo duży
 rozmiar samej platformy oraz minimalnie gorsza wydajność w porównaniu z
 konkurencyjnymi rozwiązaniami.
 Rozwój tej platformy jest uzależniony nie tylko od wielu programistów ale
 również firm.
 W przeciwieństwie do Angulara posiada wielu sponsorów wśród których znajdują
 się takie firmy jak Yahoo czy LinkedIn.
 Pomimo iż Ember rozwijany jest jako wolne oprogramowanie bez ingerencji
 dużych firm to można powiedzieć, że posiada społeczność niemal tak dużą
 jak w przypadku platformy Angular.
\end_layout

\begin_layout Section
Aplikacja mobilna
\end_layout

\begin_layout Standard
W przeglądzie platform umożliwiających implementację aplikacji mobilnych
 wzięto pod uwagę technologie takie jak Ionic, Xamarin, Apache Cordova oraz
 aplikacje wykonane natywnie za pomocą Android SDK.
 Wybór przedstawionych technologii został podyktowany rosnącą popularnością
 na przestrzeni ostatnich lat oraz w celu ukazania różnych możliwości implementa
cji aplikacji mobilnych.
\end_layout

\begin_layout Subsection
Xamarin
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Xamarin
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Język programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C#
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
popularność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
niska
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
niska
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25$ - 1899$ na rok
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Xamarin to platforma przeznaczona do tworzenia aplikacji mobilnych na różne
 systemy Android, iOS, Windows Phone, jednak kod kompilowany jest dla każdej
 platformy osobno, co zapewnia nawet do 90% współdzielonego kodu, co zapewnia
 niezwykle szybkie tworzenie aplikacji na 3 najpopularniejsze systemy mobilne.
 Językiem programowania w Xamarinie jest C#, a także XAML, służący do tworzenia
 interfejsu użytkownika, który jest kompilowany do natywnego kodu, co zapewnia
 wygląd charakterystyczny dla każdej platformy.
 Największą wadą jest niska wydajność, a także konieczność płacenia abonamentu
 za korzystanie z platformy.
 Często wykonywane procesy kompilacji i instalacji na urządzeniu lub symulatorze
 są bardzo czasochłonne, natomiast użytkownicy odczują zauważalny spadek
 wydajności interfejsów, w szczególności dla list z bardzo dużą liczbą skompliko
wanych elementów.
\end_layout

\begin_layout Subsection
Apache Cordova
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Apache Cordova
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Język programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Html 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2009
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
popularność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
niska
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
niska
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
krótki
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
darmowa
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Apache Cordova, dawniej nazywana PhoneGap, to kolejna hybrydowa platforma
 ułatwiająca stworzenie aplikacji mobilnej na różne systemy, również na
 te bardziej niszowe jak BlackBerry OS.
 Warto podkreślić, iż Apache Cordova to projekt open-source, dzięki czemu
 korzystanie z niego jest darmowe, a architektura oferuje bogactwo wtyczek
 i modułów, które mogą zapewnić dodatkowe usługi lub narzędzia.
 Jednak jak każdy projekt open-source niesie również zagrożenia takie jak
 błędnie napisane biblioteki, niepełna dokumentacja, bądź zaprzestanie rozwoju
 tych bibliotek.
 Głównymi językami programowania są HTML, JavaScript oraz CSS, mimo to aplikacja
 jest instalowana jak natywne programy.
 Niestety tak jak w przypadku platformy Xamarin, aplikacje mają ogromne
 problemy z wydajnością przy bardziej skomplikowanych widokach.
\end_layout

\begin_layout Subsection
Android SDK
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Android SDK
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Język programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rok powstania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2009
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
popularność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydajność
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wysoka
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
czas wytworzenia oprogramowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
średni
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cena
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
darmowa
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Android SDK zostało wydane w 2009 roku i wspiera natywne tworzenie aplikacji,
 jest najpopularniejszym sposobem programowania na system Android.
 W 2013 roku zostało udostępnione Android Studio, czyli środowisko opartego
 na IntelliJ IDEA, dzięki któremu pisanie aplikacji zostało znacznie ułatwione
 i uproszczone, np.
 poprzez użycie nowszego Gradle zamiast Anta do budowy oprogramowania i
 importowania bibliotek.
 Wytworzenie oprogramowania jest bardziej czasochłonne niż w aplikacjach
 hybrydowych, dodatkowo wymaga znajości kilku różnych języków jak Java dla
 Androida, Swift dla iOS'a oraz C# dla Windows Phone.
 Oczywiście rozwiązania natywne powodują, iż stworzona aplikacja działa
 tylko na jednym systemie mobilnym, a co za tym idzie napisane rozwiązania
 trzeba powielić w innych językach programowania dla innych systemów.
 Jednak dzięki temu otrzymujemy oprogramowanie o wiele szybsze, w szczególności
 dla skomplikowanych widoków, niż w przypadku rozwiązań wielo-platformowcyh.
\end_layout

\begin_layout Section
Podsumowanie
\end_layout

\begin_layout Standard
Wybór odpowiedniej platformy jest nie tylko uzależniony od konkretnych narzędzi,
 ale również od tego w jaki sposób aplikacje powinny się ze sobą komunikować.
 Możliwe są dwa sposoby rozwiązania tego problemu:
\end_layout

\begin_layout Itemize
Cała aplikacja internetowa umieszczona jest na jednym serwerze, który zajmuje
 się zarówno logiką jak i zwracaniem odpowiednich widoków.
 Tego typu rozwiązanie jest możliwe poprzez zastosowanie platform Ruby on
 Rails, Phoenix, Laravel oraz Meteor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/Aplikacja_internetowa.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Aplikacja internetowa umieszczona na jednym serwerze.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Aplikacja internetowa rozdzielona jest na dwie mniejsze: logikę serwera
 oraz aplikację internetową po stronie klienta.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/Aplikacja_internetowa_rodzielona.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Aplikacja internetowa podzielona na dwa oddzielne moduły, umieszczone na
 osobnych serwerach.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zarówno jedno jak i drugie rozwiązanie posiada swoje zalety i wady.
 Aplikacja umieszczona w całości na jednym serwerze wymaga jednej konfiguracji,
 jednak jest mniej elastyczna.
 Rozdzielenie serwera od aplikacji po stronie klienta w czasach gdy trendy
 i możliwości platform stale się zmieniają jest bardzo dużą zaletą.
 Możliwa jest w takim rozwiązaniu zmiana implementacji tylko jednego z modułów
 pozostawiając drugi bez zmian.
 Jest to powodem dla którego właśnie taki sposób komunikacji został użyty
 w projekcie.
\end_layout

\begin_layout Standard
Wśród dostępnych platform implementujących logikę serwera najlepszym wyborem
 okazało się Ruby on Rails.
 Głównym powodem tego wyboru była bardzo obszerna baza bibliotek programistyczny
ch oraz wsparcie społeczności programistów.
 Ponadto powstająca aplikacja związana z wydarzeniami wielokrotnie może
 zmieniać swój produkt biznesowy jak i funkcjonalność dlatego też idealnym
 wyborem było zastosowanie właśnie tej platformy.
\end_layout

\begin_layout Standard
Zupełnie inne czynniki wpłynęły na wybór platformy wspierającej implementację
 aplikacji internetowej po stronie klienta.
 Najlepszym rozwiązaniem okazał się Angular, jednak nowa wersja tej platformy
 będzie całkowicie niekompatybilna z obecną, co wymusza przepisanie całej
 aplikacji w niedalekiej przyszłości.
 Z tego powodu wybrany został Ember, który w swej funkcjonalności nie odbiega
 od Angular, a ponadto posiada obszerną społeczność oraz rozwija się bardzo
 dynamicznie.
 Równie istotne było podobieństwo w sposobie implementacji aplikacji między
 Ruby on Rails a Ember, co pozwala na płynne połączenie obu platform.
\end_layout

\begin_layout Standard
Wybór platformy dla aplikacji mobilnej był dosyć prosty, ponieważ chcąc
 tworzyć profesjonalne oprogramowanie trzeba zdecydować się na rozwiązania
 natywne.
 Żadna z obecnie dostępnych platform hybrydowych nie reprezentuje odpowiedniego
 poziomu, w szczególności trzeba zwrócić uwagę na problemy z wydajnością.
 
\end_layout

\begin_layout Chapter
Zastosowane narzędzia inżynierii oprogramowania wspomagające proces tworzenia
 aplikacji
\end_layout

\begin_layout Section
Zarządzanie projektem
\end_layout

\begin_layout Standard
Zarządzanie projektem to niezwykle ważna i kluczowa czynność, o które muszą
 dbać wszyscy członkowie zespołu, ponieważ bez odpowiedniego przygotowania,
 możliwe jest, iż powierzone im zadania nie zostaną prawidłowo i w zadanym
 czasie zrealizowane.
 Prawidłowe zarządzanie projektem ma na celu poprawne działanie organizacji,
 jednak także ma pozytywny wpływ na podniesienie motywacji i satysfakcji
 z pracy osób odpowiedzialnych za pracę nad danym projektem.
 Sprawi to, iż wydana aplikacja będzie kompletna, liczba błędów minimalna,
 a wymagania funkcjonalne spełnione.
\end_layout

\begin_layout Standard
Najważniejsze obszary odpowiedzialne za poprawne i efektywne zarządzanie
 projektami informatycznymi:
\end_layout

\begin_layout Itemize
wyraźne ustalenie celu działania,
\end_layout

\begin_layout Itemize
ustalenie szczegółowo wszystkich kierunków działań i środków, za pomocą
 których można osiągnąć założony cel,
\end_layout

\begin_layout Itemize
ułożenie dokładnego planu działania, zmierzającego do osiągnięcia celu przy
 zastosowaniu najlepszych w obecnych warunkach środków, 
\end_layout

\begin_layout Itemize
wykonanie skrupulatnie założonego planu,
\end_layout

\begin_layout Itemize
skontrolowanie osiągniętych wyników i porównanie z zamierzonym celem.
\end_layout

\begin_layout Standard
Na rynku istnieje wiele rozwiązań wspomagających zarządzanie projektami,
 do najpopularniejszych należą Trello, Pivotal Tracker, Jira oraz Redmine.
\end_layout

\begin_layout Standard
Wybór odpowiedniego narzędzia został podyktowany przez następujące czynniki:
\end_layout

\begin_layout Itemize
liczba programistów w zespole
\end_layout

\begin_layout Itemize
popularność systemu
\end_layout

\begin_layout Itemize
cena
\end_layout

\begin_layout Itemize
jakość
\end_layout

\begin_layout Itemize
metodyka zarządzania projektami
\end_layout

\begin_layout Standard
Na podstawie powyższych kryteriów podjęto decyzję o wyborze narzędzia Pivotal
 Tracker, które zostało stworzene do pracy z metodami Agile.
\end_layout

\begin_layout Standard
Wybór odpowiedniej metodyki pełni niezwykle istotną rolę w zarządzaniu projektu.
 Programowanie zwinne (z ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Agile software development
\end_layout

\end_inset

) to grupa metod wytwarzania oprogramowania opartego na modelu iteracyjnym.
 Posiada deklarację wspólnych zasad tworzenia oprogramowania, która została
 nazwana manifestem Agile.
 Pod obszarem pojęcia Agile zalicza się wiele metodyk zarządzania projektami
 i dostarczania produktów, a najpopularniejszą wśród nich jest Scrum, stworzony
 przez Kena Schwabera i Jeffa Sutherlanda.
 Scrum to metoda organizacji pracy nad wytwarzaniem produktu polegająca
 na podzieleniu projektu na mniejsze części i rozłożeniu ich w trwające
 maksymalnie jeden miesiąc iteracje, zwane sprintami.
 Po każdym sprincie zespół pracujący nad rozwojem projektu musi być w stanie
 dostarczyć działającą wersję produktu.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/agile.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
 Schemat obrazujący zasady działania metod Agile
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Pivotal Tracker
\end_layout

\begin_layout Standard
Pivotal Tracker powstał w 2008 roku i ma na celu ułatwienie pracy, wykrystalizow
anie priorytetów i pomoc w zarządzaniu projektem, aby poszczególni członkowie
 zespołu mogli skupić się na tym, co niezbędne.
 Dzięki temu narzędziu możemy zobaczyć wszystkie swoje zadania w wielu projektac
h na jednym ekranie.
 Zespoły programistów mogą skupić się na pracy, ponieważ priorytety projektu
 są zawsze jasne, można je zmienić, ale nie jest to zalecane i od razu widać
 jak to wpływa na poszczególne etapy.
 Pivotal oferuje również przydzielanie punktów, tzw.
 
\begin_inset Quotes pld
\end_inset

story points
\begin_inset Quotes prd
\end_inset

, do zadań, co jest często równoważne z czasem oszacowania.
 Punkty są określane na podstawie oceny zespołu, jak dużo pracy wymaga dane
 zadanie.
 Pozwala to na optymalizację działania i zwiększenie prawdopodobieństwa
 przewidzenia przyszłej efektywności.
 Istnieje możliwość przeciągania zadań i wyznacznia ich obecnego statusu.
 Icebox to kolumna, w której trzymane są wszystkie określone zadania, które
 układamy w odpowiednie iteracje w kolumnie Backlog.
 Current to zadania na obecny sprint, a w kolumnie Done mamy zakończone
 czynności i funkcjonalności.
 Kliknięcie w przycisk start przenosi dane zadanie w kierunku górnej części
 bieżącej iteracji, co pokazuje, że jest w trakcie opracowywania.
 Opowieść następnie przechodzi przez kolejne etapy od gotowej, do realizacji
 i jest przyjętej, bądź odrzuconej przez klienta.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshoty/mateby_pivotal.png
	width 70page%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Widok ekranu zarządzania projektem w Pivotal Tracker
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Projekt został podzielony na iteracje trwające 7 dni, przydzielanie punktów
 w skali od 1 do 3 w zależność od obszerności danej funkcjonalności , a
 podstawowa efektywność na 5 punktów.
 Okazało się, iż nakład pracy potrzebny do wykonania całego projektu wymaga
 znaczącego zwiększenia.
 W kluczowych sprintach udało się osiągnąć efektywność na poziomie 15 punktów.
\end_layout

\begin_layout Standard
Pivotal Tracker umożliwia przejrzenie historii wszystkich sprintów, a całe
 zarządzanie projektem jest niezwykle proste.
 Dostępny jest również widok podsumowania projektu na dany moment.
 Jako przykład został podany projekt aplikacji mobilnej na system Android.
 Można zauważyć systematyczny przyrost efektywności wykonywania zadań w
 poszczególnych iteracjach.
 Było to spowodowane tym, iż istniało wiele zależnych czynników zewnętrznych
 na czas poświęcony danemu sprintowi.
 W warunkach kiedy programiści pracują określoną liczbę godzin podczas iteracji,
 poniższy wykres powinien być jak najbardziej stały.
 
\end_layout

\begin_layout Standard
Warto podkreślić, iż Pivotal Tracker oferuje możliwość integracji z innymi
 serwisami takimi jak Github lub Google.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshoty/mateby_pivotal_summary.jpg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Widok podsumowania projektu w Pivotal Tracker
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
System kontroli wersji
\end_layout

\begin_layout Standard
Podstawowe operacje na plikach takie jak kopiowanie i wklejanie są wystarczające
 gdy oprogramowanie powstaje przez jednego programistę.
 Problem pojawia się w przypadku pracy w grupie gdy wiele osób modyfikuje
 ten sam plik powodując nadpisanie poprzedniej zmiany.
 Z tego powodu powstał system kontroli wersji będący zaawansowanym narzędziem
 umożliwiającym synchronizację zmian dokonanych na plikach poprzez ich monitorow
anie oraz oznaczanie tych modyfikacji.
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Przechowywanie historii plików umożliwia powrót do wersji wcześniejszych
 w dowolnym momencie co zmniejsza ryzyko wykonywania zmian oraz wprowadza
 dobrą praktykę tworzenia oprogramowania według kolejnych iteracji.
\end_layout

\begin_layout Standard
Obecnie istnieje wiele wolnodostępnych jak i własnościowych dystrybucji
 systemu kontroli wersji.
 Ze względu na ich architekturę dzielą się na:
\end_layout

\begin_layout Itemize
lokalne:
\end_layout

\begin_deeper
\begin_layout Itemize
zmiany przechowywane są tylko lokalnie
\end_layout

\end_deeper
\begin_layout Itemize
scentralizowane:
\end_layout

\begin_deeper
\begin_layout Itemize
zmiany przechowywane są w centralnym repozytorium 
\end_layout

\begin_layout Itemize
praca wyłącznie on-line
\end_layout

\end_deeper
\begin_layout Itemize
rozproszone:
\end_layout

\begin_deeper
\begin_layout Itemize
zmiany przechowywane są lokalnie
\end_layout

\begin_layout Itemize
możliwa jest synchronizacja zmian z serwerem zdalnym
\end_layout

\begin_layout Itemize
praca on-line lub off-line 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Obecnie najczęściej używa się repozytoriów scentralizowanych oraz rozproszonych
 wśród których na szczególną uwagę zasługują dystrybucje Git oraz Svn (z
 ang.
 Subversion).
 Wybór systemu kontroli wersji został podyktowany przez następujące czynniki
\end_layout

\begin_layout Itemize
liczba programistów w zespole
\end_layout

\begin_layout Itemize
popularność systemu
\end_layout

\begin_layout Itemize
możliwość integracji z innymi narzędziami
\end_layout

\begin_layout Standard
Z tego względu został wybrany system Git wraz z serwisem Github.
\end_layout

\begin_layout Paragraph
System kontroli wersji Git
\end_layout

\begin_layout Standard
Git w powstał 2005 roku jako darmowe narzędzie służące do zarządzania kodem
 Linuksa i od tej pory jego popularność rośnie w szybkim tempie.
 Jest to rozproszony system kontroli wersji oferujący zaawansowane operacje
 przez co dla początkujących użytkowników może wydawać się trudnym narzędziem.
 Posiada dobrze wykonaną dokumentację oraz dużą społeczność programistów
 pracujących nad jego rozwojem.
 Do głównych zalet Gita można zaliczyć dobrą wydajność, kontrolę spójności
 danych oraz lokalność wprowadzanych zmian.
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Warto również dodać, że istnieje wiele serwerów umożliwiających przechowywanie
 repozytoriów opartych na systemie Git.
 Najbardziej popularnym z nich jest serwis Github oferujący darmowe repozytoria
 przechowujące oprogramowanie na zasadzie wolnego oprogramowania oraz płatne,
 które przechowują prywatny kod.
 Jego popularność może być efektem dużego nacisku na wytwarzanie oprogramowania
 opartego na darmowej licencji.
\end_layout

\begin_layout Paragraph
Serwis Github
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshoty/mateby_repo.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Widok repozytorium logiki serwera w serwisie Github
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Serwis Github powstał w 2008 roku i jest obecnie jednym z największych serwisów
 obsługujących system Git.
 Do tej pory przy jego pomocy zostało stworzonych ponad 10 milionów repozytoriów.
 W znacznym stopniu ułatwia pracę zespołową udostępniając taką funkcjonalność
 jak
\end_layout

\begin_layout Itemize
przeprowadzenie recenzji kodu
\end_layout

\begin_layout Itemize
tworzenie dokumentacji
\end_layout

\begin_layout Itemize
przeglądanie statystyk
\end_layout

\begin_layout Itemize
tworzenie nowych tematycznych wątków
\end_layout

\begin_layout Standard
Jego ogromną zaletą jest również prosta integracja z wieloma serwisami odpowiedz
ialnymi za pozostałe etapy tworzenia oprogramowania.
\end_layout

\begin_layout Section
System ciągłej integracji
\end_layout

\begin_layout Standard
System ciągłej integracji wspomoga usystematyzować procesy wykonywane przez
 każdego z programistów.
 Każdy pracownik przed zaktualizowaniem zmian na repozytorium
\end_layout

\begin_layout Standard
Oprócz wymienionych zalet systemy ciągłej integracji niosą ze sobą również
 pewne niedogodności:
\end_layout

\begin_layout Itemize
wymagają konfiguracji i utrzymania
\end_layout

\begin_layout Itemize
wymagają kodu dobrej jakości.
 Szczególnie kodu z odpowiednią ilością testów by móc korzystać z zalet
 automatyzacji testów
\end_layout

\begin_layout Itemize
mogą wymagać znacznych nakładów sprzętowych.
\end_layout

\begin_layout Standard
Istnieje coraz większe zapotrzebowanie na systemy ciągłej integracji dlatego
 rynek oferuje coraz więcej narzędzi takich jak Jenkins, CruiseControl,
 bądź CircleCi .
 Wybór odpowiedniej platformy do ciągłej integracji został podyktowany przez
 następujące czynniki:
\end_layout

\begin_layout Itemize
wspomaganie różnorodnych platform programistycznych
\end_layout

\begin_layout Itemize
wygoda użytkowania
\end_layout

\begin_layout Itemize
popularność systemu
\end_layout

\begin_layout Itemize
cena
\end_layout

\begin_layout Standard
Na podstawie wyżej wymienionych kryteriów wybrano serwis CircleCi.
\end_layout

\begin_layout Paragraph
Platforma CircleCi
\end_layout

\begin_layout Standard
Platfroma CircleCi...Przyspieszyć cykl badań i rozwoju, CircleCI jest elastyczny,
 aby uruchomić w środowisku i skali z twojego wzrostu.
 Mieć spokój poprzez zmniejszenie błędów i poprawy jakości swojej aplikacji.
\end_layout

\begin_layout Standard
Rozwój oprogramowania platformy pomaga zespołom szybko zwolnić kod zaufać
 poprzez automatyzację tworzenia, testowania i procesu wdrażania.
 Stworzony dla deweloperów, CircleCI oferuje nowoczesną platformę do tworzenia
 oprogramowania, które umożliwia zespoły ramp szybko, łatwo skalować i zbudować
 pewnie na co dzień.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshoty/mateby_circle.jpg
	width 70page%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Widok systemu ciągłej integracji CircleCi
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Komunikator
\end_layout

\begin_layout Standard
Rola komunikatora w projektach nie tylko informatycznych jest często niedocenian
a, jednak coraz więcej firm zauważa znaczenie komunikatorów internetowych
 zarówno do kontaktów z klientami, jak i do codziennej pracy urzędników.
 Należy jednak pamiętać, iż nie w każdej sytuacji używanie komunikatora
 jest taktowne, natomiast o wiele łatwiej, szybciej i wygodniej jest wysłać
 krótką wiadomość czy odnośnik do dokumentu za pomocą komunikatora, niż
 próbować dodzwonić się do konkretnej osoby.
 W każdej firmie istnieje podział na odpowiednie działy, dobry komunikator
 powinien umożliwić stworzenie analogicznego podziału na grupy, w celu wygody
 użytkowania i klarowności tematów konwersacji.
 Tworzone pokoje mogą być publiczne i prywatnych, co również zwiększa komfort
 pracy, ponieważ działy mogą komunikować się z innymi działami, bądź mają
 pewność, iż tajne informacje nie będą widoczne przez innych użytkowników.
 
\end_layout

\begin_layout Standard
Projekty informatyczne cechują się dodatkowymi własnościami, które jeszcze
 bardziej zwiększają wygodę pracy.
 Środowisko informatyczne wykorzystuje bardzo wiele aplikacji ułatwiających
 pracę, dlatego niezwykle iston rolą komunikatora powinna być możliwość
 integracji z innymi narzędziami inżynierii oprogramowania takich jak platforma
 służąca zarządzaniu projektem, system konroli wersji, czy system ciągłej
 integracji.
\end_layout

\begin_layout Standard
W tej chwili istnieje bardzo wiele aplikacji służących do komunikacji, jak
 Skype, Google Hangouts czy Messanger, aczkolwiek są to programy służące
 głównie do komunikacji nieformalnej.
 Do użytku biznesowego powstały inne platformy, wśród których prym wiodą
 HipChat oraz Slack.
 Wybór odpowiedniego narzędzia do komunikacji w zespole został podyktowany
 przez następujące czynniki:
\end_layout

\begin_layout Itemize
możliwość integracji z innymi narzędziami
\end_layout

\begin_layout Itemize
wygoda użytkowania
\end_layout

\begin_layout Itemize
liczba programistów w zespole
\end_layout

\begin_layout Itemize
popularność systemu
\end_layout

\begin_layout Itemize
cena
\end_layout

\begin_layout Standard
Z tego względu została wybrana platforma Slack.
\end_layout

\begin_layout Paragraph
Slack
\end_layout

\begin_layout Standard
Slack jest narzędziem do pracy zespołowej opartym na chmurze, powstałym
 w 2013 roku.
 Ułatwia komunikację w zespole, przechowywanie i dzielenie się plikami.
 Istnieje możliwość organizowania rozmów zespołu w kanałach otwartych, jak
 i dla wrażliwych informacji, tworzenie kanałów prywatnych.
 Kolejną funkcjonalnością jest oznaczania konkretnych członków zespołu,
 w celu powiadamienia ich o nieodczytanych wiadomościach.
 Slack oferuje zestaw zaawansowanych narzędzi wyszukiwania, dzięki systemowi
 automatycznego indeksowania.
 Najważniejszą funkcjonalnością jest możliwość integracji z innymi narzędziami.
 Udostępnia synchronizację plików z takimi serwisami jak jak Google Drive,
 Dropbox lub Box.
 Poza tym jest opcja podłączenia serwisu Github, dzięki temu otrzymujemy
 na oznaczony kanał informację o wysłanych zmianach.
 Kolejnym serwisem, który możemy zintegrować ze Slackiem to Pivotal Tracker,
 daje to możliwość śledzenia zmian statusów przydzielonych zadań, co więcej
 połączenie Pivotala z Githubem informuje o wrzuconych zmianach do repozytorium
 pod tytułem odpowiedniego zadania.
 Slack umożliwia również połączenie się ze środowiskiem CircleCi, powoduje
 to uzyskiwanie informacji na temat bieżących zmian w kodzie, skonfigurowanych
 w systemie ciągłej integracji.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshoty/mateby_slack.jpg
	width 70page%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Widok komunikatora Slack
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Serwer przedprodukcyjny
\end_layout

\begin_layout Standard
Jeśli zmiany wrzucone na zdalne repozytorium przejdą wszystkie etapy sprawdzania
 poprawności w systemie ciągłej integracji trafią na serwer przedprodukcyjny,
 który pełni bardzo ważną rolę na etapie testowania wdrażanej funkcjonalności.
 Aby przeprowadzone testy były skuteczne należy użyć tej samej konfiguracji
 jaka znajduje się na serwerze produkcyjnym.
 Pozwala to na wykluczenie możliwych problemów wynikających z różnic w obrębie
 wersji zależnych bibliotek lub aplikacji.
 Oznacza to zatem, że serwer ten powinien być lustrzanym odbiciem serwera
 produkcyjnego, z wyłączeniem zawartości bazy danych.
 Ze względu na fakt, że aplikacja internetowa oddzielona jest od logiki
 serwera użyte zostały dwa serwery oparte na platformie Heroku.
\end_layout

\begin_layout Paragraph
Platfroma Heroku
\end_layout

\begin_layout Standard
Platforma Heroku istnieje od 2007 roku.
 Początkowo udostępniała jedynie język Ruby lecz w chwili obecnej posiada
 wsparcie dla kilku najbardziej znanych języków programowania.
 Dużą zaletą tej platformy jest to, że została stworzona w modelu chmury
 obliczeniowej - Platform as a Service (z ang.
 platforma jako usługa).
 Oznacza to, że programista otrzymuje w pełni przygotowany system operacyjny
 wraz z dostosowanym oprogramowaniem 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

.
 W pewnym sensie ogranicza to możliwość znacznej ingerencji w konfiguracje
 serwera ale pozwala na jego uruchomienie w znacznie krótszym czasie.
 Równie istotną zaletą jest darmowy plan w najsłabszej konfiguracji przez
 co platforma ta zyskała duża popularność w środowisku wolnego oprogramowania.
 Głównie z tej przyczyny użyto platformę Heroku w celu stworzenia serwera
 przedprodukcyjnego.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement !h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshoty/mateby_heroku.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Platforma Heroku
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Projekt aplikacji
\end_layout

\begin_layout Standard
Projekt aplikacji jest jednym z najważniejszych etapów procesu wytwarzania
 oprogramowania.
 Odpowiednie określenie założeń co do funkcjonalności i wyglądu aplikacji
 znacznie ułatwia dalsze prace.
 W
\begin_inset space ~
\end_inset

przypadku opisywanego systemu na etap projektu aplikacji składały się 3
 główne zadania:
\end_layout

\begin_layout Itemize
określenie wymagań funkcjonalnych, które musi spełniać tworzony system
\end_layout

\begin_layout Itemize
stworzenie prototypów interfejsu aplikacji internetowej i mobilnej
\end_layout

\begin_layout Itemize
zaprojektowanie bazy danych w modelu związków-encji i przetransformowanie
 powstałego schematu do modelu relacyjnego
\end_layout

\begin_layout Section
Wymagania funkcjonalne i pozafunkcjonalne
\end_layout

\begin_layout Standard
Kluczową cechą każdej aplikacji jest jej funkcjonalność.
 Powinna być ona dobrze sprecyzowana tak, by nie była ani zbyt szeroka,
 ani nie ograniczała możliwości potencjalnego użytkownika.
 Opis funkcji, które mają być realizowane przez system, nazywamy 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
wymaganiami funkcjonalnymi
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

.
 Natomiast opis założeń co do jakości (np.
 wydajności czy ograniczeń) oferowanych usług nazywamy 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
wymaganiami pozafunkcjonalnymi
\end_layout

\end_inset

.
 Przed rozpoczęciem specyfikacji wymagań należy jednak przyjrzeć się ogólnemu
 kontekstowi tworzonej aplikacji, a w szczególności klasom użytkowników
 oraz wykorzystywanym systemom zewnętrznym.
\end_layout

\begin_layout Paragraph
Kontekst
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/diagram_kontekstu.png
	lyxscale 50
	scale 60

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Diagram kontekstu dla opisywanego systemu 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
W przypadku opisywanego systemu można rozróżnić 3 rodzaje użytkowników:
\end_layout

\begin_layout Itemize
Użytkownik zwykły --- jego główną motywacją do korzystania z serwisu jest
 wyszukiwanie wydarzeń, dyskutowanie na ich temat i dołączanie do nich,
 posiada także uprawnienia do tworzenia własnych wydarzeń
\end_layout

\begin_layout Itemize
Instytucja --- zrzesza swoje odziały, może nimi zarządzać i przeglądać dane
 na ich temat
\end_layout

\begin_layout Itemize
Oddział instytucji (w skrócie nazywany Oddziałem) --- przede wszystkim posiada
 uprawnienia do tworzenia wydarzeń, może także przeglądać wszystkie wydarzenia
 zgromadzone w serwisie
\end_layout

\begin_layout Standard
Każdy z aktorów posiada w serwisie dedykowany typ konta o ograniczonych
 uprawnieniach.
\end_layout

\begin_layout Standard
Opisywany system korzysta z publicznego API dostarczanego przez firmę Google
 m.in.
 w celu ułatwienia wskazania i prezentacji miejsca odbywania się wydarzenia.
\end_layout

\begin_layout Standard
Rys.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.1"

\end_inset

 stanowi graficzne podsumowanie kontekstu tworzonej aplikacji.
\end_layout

\begin_layout Paragraph
Lista wymagań funkcjonalnych systemu
\end_layout

\begin_layout Standard
Poniżej można znaleźć listę przypadków użycia dotyczących projektowanego
 systemu.
 Każdy przypadek jest opatrzony tytułem, spisem aktorów, których dotyczy
 oraz krótkim opisem i efektem działania.
\series bold

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\series default

\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC01: Rejestracja użytkownika
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub instytucja.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Użytkownik zwykły lub instytucja powinna mieć możliwość zarejestrowania
 się w serwisie.
 Po wybraniu opcji rejestracji ma pojawić się odpowiedni formularz pozwalający
 na podanie danych na temat konta (np.
 adresu e-mail, hasła, imienia i nazwiska w przypadku użytkownika lub nazwy
 w przypadku instytucji).
 Po zatwierdzeniu wprowadzonych danych, jeżeli rejestracja przebiegnie pomyślnie
, użytkownik powinien zostać przekierowany do strony głównej aplikacji.
 W przeciwnym wypadku powinna zostać wyświetlona wiadomość o błędzie wraz
 z przyczyną niepowodzenia.
\series bold

\begin_inset Newline newline
\end_inset


\series default

\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset


\series bold
 
\series default
W przypadku pozytywnego zakończenia operacji ma miejsce zapisanie nowego
 rekordu użytkownika zwykłego lub instytucji w bazie danych.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC02: Logowanie użytkownika
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły, instytucja lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Użytkownik powinien mieć możliwość zalogowania się na wcześniej utworzone
 konto.
 Po wybraniu opcji logowania ma pojawić się formularz pozwalający na wpisanie
 adresu e-mail i hasła podanego w procesie rejestracji lub tworzenia oddziału
 instytucji.
 Po podaniu prawidłowych danych użytkownik powinien zostać przekierowany
 do poprzedniej strony w obrębie serwisu.
 W przeciwnym wypadku powinien zostać wyświetlony komunikat o niepowodzeniu
 wraz z jego przyczyną.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC03: Wyświetlenie spisu kategorii i podkategorii
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Użytkownik powinien mieć możliwość wyświetlenia kategorii.
 Ich spis ma się znajdować na stronie startowej.
 Wybierając jedną z kategorii użytkownik zostaje przekierowany do spisu
 podkategorii.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC04: Wyświetlenie listy wydarzeń
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Użytkownik powinien mieć możliwość wyświetlenia listy wydarzeń powiązanych
 z wybraną podkategorią.
 Znajdując się na spisie podkategorii po wybraniu jednej z nich lub też
 pominięciu wyboru powinna pojawić się lista wydarzeń z nią powiązanych.
 W przypadku pominięcia wyboru mają zostać wyświetlone wydarzenia ze wszystkich
 podkategorii danej kategorii.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC05: Wyszukiwanie wydarzeń
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Użytkownik powinien mieć możliwość filtrowania wydarzeń po nazwie, dacie
 lub parametrach charakterystycznych dla danej podkategorii.
 Formularz umożliwiający wyszukiwanie ma znajdować się na ekranie zawierającym
 spis wydarzeń danej podkategorii.
 Po wypełnieniu tego formularza i zatwierdzeniu go, użytkownik otrzymuje
 przefiltrowaną listę wydarzeń.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC06: Wyświetlenie pojedynczego wydarzenia
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość wyświetlenia
 szczegółowego widoku pojedynczego wydarzenia.
 Znajdując się na ekranie zawierającym listę wydarzeń, po wybraniu jednej
 z nich użytkownik powinien zostać przekierowany do widoku pojedynczego
 wydarzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC07: Utworzenie wydarzenia
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość utworzenia
 nowego wydarzenia.
 Po wybraniu opcji dodania wydarzenia ma pojawić się formularz pozwalający
 na podanie danych na jego temat (np.
 nazwa wydarzenia, miejsce i czas jego organizacji).
 Po podaniu prawidłowych danych i zaakceptowania formularza użytkownik zostaje
 przekierowany na widok nowo utworzonego wydarzenia.
 W przeciwnym wypadku pojawia się komunikat o błędzie wraz z przyczyną niepowodz
enia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia ma miejsce zapis nowego rekordu wydarzenia w bazie
 danych.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC08: Edycja wydarzenia
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik lub oddział powinien mieć możliwość edycji utworzonych
 przez siebie wydarzeń, które jeszcze się nie odbyły.
 Po wybraniu opcji edycji wydarzenia ma pojawić się formularz (podobny jak
 w przypadku tworzenia wydarzenia) pozwalający na edycję danych wydarzenia.
 Po zakończeniu edycji i zatwierdzeniu formularza w przypadku powodzenia
 użytkownik zostanie przekierowany do widoku edytowanego wydarzenia.
 W przeciwnym wypadku zostaną wyświetlone przyczyny niepowodzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych dojdzie do aktualizacji rekordu edytowane
go wydarzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC09: Usunięcie wydarzenia
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość usunięcia
 utworzonego przez siebie wydarzenia.
 Po wybraniu opcji usunięcia wydarzenia ma pojawić się żądanie potwierdzenia
 wykonywanej operacji.
 W przypadku potwierdzenia powinno nastąpić przekierowanie do strony startowej
 oraz wyświetlenie informacji o powodzeniu lub niepowodzeniu.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia nastąpi usunięcie z bazy danych wybranego rekordu
 wydarzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC10: Wyświetlenie oddziałów instytucji
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Instytucja.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowana instytucja powinna mieć możliwość wyświetlenia swoich oddziałów.
 Po przejściu na ekran zarządzania oddziałami użytkownik ma zobaczyć listę
 swoich jednostek.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC11: Utworzenie oddziału instytucji
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Instytucja.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowana instytucja powinna mieć możliwość utworzenia swojego nowego
 oddziału.
 Znajdując się na ekranie zarządzania oddziałami, po wybraniu opcji utworzenia
 nowej jednostki ma pojawić się formularz pozwalający na podanie danych
 na jej temat (np.
 nazwa oddziału, jego adres e-mail, hasło do logowania, lokalizacja).
 Po zatwierdzeniu formularza z prawidłowymi danymi, użytkownik powinien
 zostać przekierowany z powrotem do ekranu zarządzania oddziałami.
 W przeciwnym wypadku wyświetlone zostaną przyczyny niepowodzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych utworzony zostanie nowy rekord oddziału.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC12: Edycja oddziału instytucji
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Instytucja.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowana instytucja powinna mieć możliwość edycji swoich oddziałów.
 Znajdując się na ekranie zarządzania oddziałam, po wybraniu opcji edycji
 danej jednostki powinien pojawić się formularz (podobny jak w przypadku
 tworzenia oddziału) pozwalający na edycję jej danych.
 Po zakończeniu edycji i zatwierdzeniu formularza w przypadku powodzenia
 użytkownik zostanie przekierowany z powrotem do ekranu zarządzania oddziałami.
 W przeciwnym wypadku zostaną wyświetlone przyczyny niepowodzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych dojdzie do aktualizacji rekordu edytowane
go oddziału.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC13: Usunięcie oddziału instytucji
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Instytucja.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowana instytucja powinna mieć możliwość usuwania swoich oddziałów.
 Znajdując się na ekranie zarządzania oddziałem, po wybraniu opcji usunięcia
 danej jednostki ma pojawić się żądanie potwierdzenia wykonywanej operacji.
 Po potwierdzeniu użytkownik powinno nastąpić przekierowanie z powrotem
 do ekranu zarządzania oddziałami oraz wyświetlenie o powodzeniu lub niepowodzen
iu.
 
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia rekord wybranego oddziału zostaje usunięty z bazy
 danych.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC14: Wyświetlenie profilu oddziału instytucji
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły, instytucja lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość przeglądania
 profilu dowolnego oddziału.
 Zalogowana instytucja może wyświetlać profile tylko tych jednostek, które
 należą do niej.
 Po przejściu na widok profilu mają zostać wyświetlone podstawowe informacje
 na temat oddziału wraz z podsumowaniem wydarzeń ostatnio przez niego utworzonyc
h.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC15: Wyświetlenie profilu użytkownika zwykłego
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość wyświetlenia
 profilu dowolnego użytkownika zwykłego.
 Po przejściu na widok profilu mają zostać wyświetlone podstawowe informacje
 na temat danego użytkownika wraz z podsumowaniem jego ostatnio utworzonych
 i uczęszczanych wydarzeń.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC16: Edycja konta
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły, instytucja lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik powinien mieć możliwość edycji swojego konta.
 Po wybraniu opcji edycji powinien pojawić się formularz pozwalający na
 modyfikację danych konta (w przypadku użytkownika zwykłego i instytucji
 formularz powinien być podobny jak w przypadku rejestracji, w przypadku
 oddziału powinien być to formularz podobny jak przypadku tworzenia nowe
 jednostki).
 Po dokonaniu zmian i ich zatwierdzeniu w przypadku powodzenia użytkownik
 zostaje przekierowany na stronę startową.
 W przeciwnym wypadku powinny zostać wyświetlone przyczyny niepowodzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych dojdzie do aktualizacji rekordu powiązane
go z danym kontem.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC17: Wyświetlenie wydarzeń użytkownika zwykłego
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość przeglądania
 wydarzeń danego użytkownika zwykłego.
 Po przejściu na widok wydarzeń ma zostać zaprezentowany spisz wszystkich
 wydarzeń utworzonych i uczęszczanych przez wybranego użytkownika.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC18: Wyświetlenie wydarzeń oddziału
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły, oddział lub instytucja.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość przeglądania
 wydarzeń danej jednostki.
 Zalogowana instytucja może wyświetlać ten widok tylko w odniesieniu do
 swoich oddziałów.
 Po przejściu na ten ekran mają zostać zaprezentowane wszystkie wydarzenia
 utworzone przez wybraną jednostkę.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC19: Dołączenie do wydarzenia
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły powinien mieć możliwość dołączania do wydarzenia
 publicznego lub prywatnego (posiadając zaproszenie).
 Znajdując się na ekranie widoku wydarzenia po kliknięciu przycisku dołączenia
 do grona uczestników użytkownik powinien zostać poinformowany o powodzeniu
 lub przyczynach niepowodzenia podjętej akcji.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia użytkownik zostaje dodany w bazie danych do listy
 uczestników danego wydarzenia oraz dojdzie do usunięcia rekordu zaproszenia
 na dane wydarzenie, jeżeli użytkownik takowe otrzymał.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC20: Usunięcie z grona uczestników wydarzenia
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły powinien mieć możliwość zrezygnowania z uczestnict
wa w danym wydarzeniu.
 Znajdując się na widoku wydarzenia, do którego użytkownik wcześniej dołączył,
 po wybraniu opcji usunięcia z grona uczestników ma pojawić się informacja
 o sukcesie lub przyczynach niepowodzenia podjętej akcji.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia użytkownik zostaje usunięty w bazie danych z listy
 uczestników danego wydarzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC21: Wysłanie zaproszenia na wydarzenie
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Dwóch użytkowników zwykłych.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły powinien mieć możliwość zaproszenia innego
 użytkownika zwykłego na wybrane wydarzenie.
 Użytkownik może zostać zaproszony na dane wydarzenie tylko raz.
 Znajdując się na widoku wydarzenia, na które użytkownik pierwszy może zapraszać
, po wyszukaniu danego użytkownika drugiego i wybraniu opcji zaproszenia
 go ma pojawić się informacja o sukcesie lub przyczynach niepowodzeni podjętej
 akcji.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych zostanie utworzony nowy rekord zaproszeni
a na wydarzenie.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC22: Wyświetlenie otrzymanych zaproszeń
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Użytkownik zwykły powinien mieć możliwość przeglądania otrzymanych zaproszeń.
 Po wybraniu opcji wyświetlenia posiadanych zaproszeń użytkownik ma zobaczyć
 spis posiadanych zaproszeń.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC23: Odpowiedź na zaproszenie na wydarzenie
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły powinien mieć możliwość odpowiedzi na otrzymane
 zaproszenie.
 Znajdując się na widoku otrzymanych zaproszeń na wydarzenia, po wybraniu
 opcji akceptacji lub odrzucenia zaproszenia użytkownik zostaje powiadomiony
 o sukcesie lub przyczynach niepowodzenia podjętej akcji.
 Ponadto opcja akceptacji ma się wiązać z dołączeniem do wydarzenia, którego
 dane zaproszenie dotyczyło.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia dojdzie do usunięcia rekordu danego zaproszenia
 z bazy danych.
 W przypadku akceptacji zaproszenia użytkownik zostanie także dodany do
 grona uczestników wydarzenia, którego dane zaproszenie dotyczyło.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC24: Dodanie wiadomości w dyskusji na temat wydarzenia lub oddziału instytucji
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość dodania
 wiadomości w dyskusji.
 Dyskusja może się odbywać na temat oddziałów lub wydarzeń.
 Na ekranie dyskusji ma znajdować się formularz pozwalający na wprowadzenie
 testu nowej wiadomości.
 Po zatwierdzeniu formularza użytkownik zostaje powiadomiony o powodzeniu
 lub przyczynach niepowodzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych zostaje utworzony nowy rekord wiadomości.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC25: Edycja wiadomości
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość edycji
 swoich wiadomości.
 Znajdując się na widoku dyskusji, po wybraniu opcji edycji wiadomości,
 której użytkownik jest autorem, ma pojawić się formularz pozwalający na
 aktualizację tekstu wiadomości.
 Po zaakceptowaniu formularza użytkownik zostaje powiadomiony o powodzeniu
 lub przyczynach niepowodzenia.
 W przypadku anulowania edycji, wiadomość powinna pozostać niezmieniona.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych następuje aktualizacja rekordu powiązaneg
o z edytowaną wiadomością.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC26: Usunięcie wiadomości
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik zwykły lub oddział powinien mieć możliwość usuwania
 swoich wiadomości.
 Znajdując się na ekranie dyskusji, po wybraniu opcji usunięcia wiadomości,
 której użytkownik jest autorem, ma pojawić się żądanie o potwierdzenie
 akcji.
 Po potwierdzeniu wyświetlona zostaje informacja na temat powodzenia lub
 przyczyn niepowodzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia rekord wybranej wiadomości zostaje usunięty z bazy
 danych.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC27: Wylogowanie użytkownika
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły, instytucja lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Zalogowany użytkownik powinien mieć możliwość wylogowania się z serwisu.
 Po wylogowaniu użytkownik ma zostać przekierowany na stronę główną.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 Brak.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
UC28: Zmiana hasła użytkownika
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Aktorzy:
\end_layout

\end_inset

 Użytkownik zwykły, instytucja lub oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Opis:
\end_layout

\end_inset

 Użytkownik powinien mieć możliwość zmiany hasła do swojego konta.
 Po wybraniu opcji zmiany hasła ma pojawić się formularz pozwalający na
 wprowadzenie starego i nowego hasła.
 Po zatwierdzeniu formularza z poprawnymi danymi w przypadku powodzenia
 użytkownik zostaje przekierowany na stronę główną.
 W przeciwnym wypadku wyświetlone zostają przyczyny niepowodzenia.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Efekt:
\end_layout

\end_inset

 W przypadku powodzenia w bazie danych następuje aktualizacja rekordu powiązaneg
o z danym kontem.
\end_layout

\begin_layout Paragraph
Lista wymagań pozafunkcjonalnych systemu
\end_layout

\begin_layout Section
Projekt interfejsu aplikacji internetowej i mobilnej
\end_layout

\begin_layout Standard
Oprócz funkcjonalności jednym z najważniejszych aspektów praktycznie każdej
 aplikacji jest jej wygląd.
 Powinien być on przede wszystkim prosty i intuicyjny dla użytkownika.
 Te dwie cechy zostały w szczególności uwzględnione podczas projektowania
 interfejsu zarówno aplikacji internetowej, jak i mobilnej.
\end_layout

\begin_layout Subsection
Aplikacja internetowa
\end_layout

\begin_layout Standard
Poniżej znajdują się prototypy głównych ekranów aplikacji internetowej.
\end_layout

\begin_layout Paragraph
Ekran główny/widok kategorii (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.2"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/main_screen_logged_in.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp ekranu głównego aplikacji 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ekran główny jest pierwszym jaki można zobaczyć po wejściu na stronę aplikacji.
 Znajdują się na nim kafelki ze zdjęciem oraz nazwą danej kategorii (1).
 Po kliknięciu na daną kategorię pojawia się ekran wyboru podkategorii,
 którego konstrukcja jest identyczna jak widok kategorii.
 W
\begin_inset space ~
\end_inset

górnej części ekranu można zobaczyć pasek nawigacyjny, który pojawia się
 na każdym ekranie aplikacji.
 W
\begin_inset space ~
\end_inset

jego lewej części znajduje się logo aplikacji (2), które jest także odnośnikiem
 do strony głównej.
 Po prawej, jeżeli użytkownik jest zalogowany, znajduje się kolejno odnośnik
 do formularza pozwalającego na stworzenie nowego wydarzenia (3; niewidoczny
 w przypadku zalogowania jako instytucja), ikona powiadomień o otrzymaniu
 nowego zaproszenia na wydarzenie (4; widoczny tylko w przypadku zalogowania
 jako użytkownik zwykły) oraz zdjęcie użytkownika (5).
 Po kliknięciu na zdjęcie pojawia się menu (6).
 Jeżeli użytkownik nie jest zalogowany, to po prawej stronie paska nawigacji
 zobaczy odnośnik do formularza logowania oraz rejestracji.
\end_layout

\begin_layout Paragraph
Widok wydarzeń (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.3"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/events_view.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku wydarzeń 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.3"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Użytkownik zostaje przekierowany do widoku wydarzeń po wybraniu kategorii
 i określeniu (lub pominięciu) podkategorii.
 W
\begin_inset space ~
\end_inset

górnej części widoku można znaleźć karty (1) pozwalające na przełączanie
 się między wydarzeniami organizowanymi przez użytkowników zwykłych, a wydarzeni
ami organizowanymi przez oddziały instytucji.
 Pozostała część ekranu składa się z kafelków przedstawiających zdjęcie
 danego wydarzenia (2) wraz z informacjami podstawowymi (3) takimi jak nazwa,
 miejsce i czas organizacji czy koszt biletu wstępu.
 Po kliknięciu na jedną z miniatur, użytkownik zostaje przekierowany na
 stronę widoku pojedynczego wydarzenia (jeżeli wcześniej dokonał autoryzacji
 konta, w przeciwnym wypadku wyświetlony zostaje ekran logowania).
 Znajdując się na tym ekranie użytkownik ma możliwość wyszukiwania wydarzeń.
 Po wybraniu z paska nawigacyjnego ikony (4) pojawia się formularz wyszukiwania
 (5).
 W
\begin_inset space ~
\end_inset

górnej jego części znajduje się przycisk pozwalający na jego ukrycie (6).
 Poniżej można znaleźć pola, w które użytkownik może wprowadzić pożądane
 cechy poszukiwanych wydarzeń (7).
 W
\begin_inset space ~
\end_inset

dolnej części formularza znajduje się przycisk umożliwiający rozpoczęcie
 wyszukiwania wg.
 podanych parametrów (8).
\end_layout

\begin_layout Paragraph
Widok pojedynczego wydarzenia
\end_layout

\begin_layout Standard
Widok pojedynczego wydarzenia jest dostępny tylko dla zalogowanych użytkowników.
 Ekran ten został podzielony na 5 zakładek.
 Poniżej znajduje się opis zawartości każdej z nich.
\end_layout

\begin_layout Subparagraph
Zakładka 
\begin_inset Quotes pld
\end_inset

Informacje
\begin_inset Quotes prd
\end_inset

 (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.4"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/event_informations_tab.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku pojedynczego wydarzenia (zakładka 
\begin_inset Quotes pld
\end_inset

Informacje
\begin_inset Quotes prd
\end_inset

) 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.4"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na
\begin_inset space ~
\end_inset

tej zakładce można znaleźć szczegółowe dane na temat danego wydarzenia.
 Po lewej znajduje się zdjęcie (1) oraz dane podstawowe (2).
 Po prawej można znaleźć przycisk pozwalający na dołączenie do grona uczestników
 (3; będąc uwierztelnionym jako organizator, w tym miejscu można znaleźć
 przyciski umożliwiające edycję i usunięcie wydarzenia).
 Znajduje się tu także nazwa wydarzenia (4) wraz ze szczegółowym jego opisem
 (5) oraz znacznikami (6).
 Po kliknięciu na znacznik, następuje przekierowany do strony, w której
 można przeglądać wydarzenia z nim skojarzone (ekran ten ma identyczny układ
 jak widok wydarzeń).
\end_layout

\begin_layout Subparagraph
Zakładka 
\begin_inset Quotes pld
\end_inset

Uczestnicy
\begin_inset Quotes prd
\end_inset

 (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.5"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/event_participants_tab.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku pojedynczego wydarzenia (zakładka 
\begin_inset Quotes pld
\end_inset

Uczestnicy
\begin_inset Quotes prd
\end_inset

) 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.5"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na
\begin_inset space ~
\end_inset

tej zakładce znajduje się lista użytkowników uczestniczących w wydarzeniu
 (1).
 Istnieje także możliwość wysłania zaproszenia do osoby, która nie jest
 jeszcze uczestnikiem (2 --- pole tekstowe służące do wyszukania zapraszanego
 użytkownika; 3 --- przycisk potwierdzający wysłanie zaproszenia; opcja
 ta jest dostępna dla twórcy wydarzenia lub dla każdego uczestnika, jeżeli
 organizator zaznaczył odpowiednią opcję w formularzu tworzenia wydarzenia).
\end_layout

\begin_layout Subparagraph
Zakładka 
\begin_inset Quotes pld
\end_inset

Lokalizacja
\begin_inset Quotes prd
\end_inset

 (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.6"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/event_localization_tab.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku pojedynczego wydarzenia (zakładka 
\begin_inset Quotes pld
\end_inset

Lokalizacja
\begin_inset Quotes prd
\end_inset

) 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.6"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na
\begin_inset space ~
\end_inset

tej zakładce można znaleźć mapkę okolicy (1) wraz ze znacznikiem (2) wskazującym
 miejsce organizacji wydarzenia.
\end_layout

\begin_layout Subparagraph
Zakładka 
\begin_inset Quotes pld
\end_inset

Dyskusja
\begin_inset Quotes prd
\end_inset

 (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.7"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/event_posts_tab.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku pojedynczego wydarzenia (zakładka 
\begin_inset Quotes pld
\end_inset

Dyskusja
\begin_inset Quotes prd
\end_inset

) 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.7"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na
\begin_inset space ~
\end_inset

tej zakładce znajduje się dyskusja na temat danego wydarzenia toczona przez
 użytkowników.
 W górnej części ekranu można znaleźć formularz pozwalający na dodanie nowej
 wiadomości (1 --- pole tekstowe służące do wprowadzenia tekstu wiadomości;
 2 --- przycisk potwierdzający stworzenie wiadomości).
 W dolnej części ekranu można prześledzić historię dyskusji (3).
 Istnieje także możliwość edycji (4) lub usunięcia (5) już dodanej wiadomości
 (tylko w przypadku wiadomości swojego autorstwa).
\end_layout

\begin_layout Subparagraph
Zakładka 
\begin_inset Quotes pld
\end_inset

Organizator
\begin_inset Quotes prd
\end_inset

 (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.8"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/event_organizer_tab.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku pojedynczego wydarzenia (zakładka 
\begin_inset Quotes pld
\end_inset

Organizator
\begin_inset Quotes prd
\end_inset

) 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.8"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na tej zakładce umieszczone zostały informacje na temat organizatora wydarzenia.
 Po lewej znajduje się zdjęcie użytkownika (1), po prawej zaś można znaleźć
 imię i nazwisko lub nazwę organizatora (2) oraz dane na jego temat (3).
\end_layout

\begin_layout Paragraph
Widok profilu użytkownika/oddziału instytucji (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.9"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/user_view.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku profilu użytkownika 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.9"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Widok profilu użytkownika lub oddziału instytucji jest dostępny tylko po
 uprzedniej autoryzacji.
 Poza informacjami zawartymi na karcie 
\begin_inset Quotes pld
\end_inset

Organizator
\begin_inset Quotes prd
\end_inset

 widoku pojedynczego wydarzenia, na tym ekranie można znaleźć listę trzech
 ostatnich wydarzeń, które dany użytkownik organizował (1) i w których uczestnic
zył (2).
 W przypadku widoku profilu oddziału na tej stronie zabraknie (2), lecz
 znajdzie się dodatkowo zakładka, której kliknięcie skutkuje wyświetleniem
 dyskusji na temat danego oddziału (jej wygląd jest identyczny jak zawartość
 zakładki 
\begin_inset Quotes pld
\end_inset

Dyskusja
\begin_inset Quotes prd
\end_inset

 widoku pojedynczego wydarzenia).
\end_layout

\begin_layout Paragraph
Widok zarządzania oddziałami instytucji (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.10"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_internetowa/branch_administration.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku zarządzania oddziałami instytucji 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.10"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Widok ten jest dostępny tylko dla użytkowników uwierzytelnionych jako instytucja.
 Można na nim znaleźć spis oddziałów danej instytucji.
 Każda jednostka jest przedstawiona za pomocą kafelka składającego się ze
 zdjęcia oddziału (1) oraz podsumowania najważniejszych informacji na jego
 temat (2).
 Po wybraniu danego oddziału następuje przekierowanie do widoku jego profilu.
 Na tym ekranie znajduje się tu także możliwość edycji (3) oraz usunięcia
 (4) danej jednostki.
 W dolnej części ekranu znajduje się odnośnik do formularza utworzenia nowego
 oddziału (5).
\end_layout

\begin_layout Subsection
Aplikacja mobilna
\end_layout

\begin_layout Standard
Projektując interfejs aplikacji mobilnej należy zwrócić uwagę na dwa dodatkowe
 aspekty.
 Po pierwsze wygląd aplikacji mobilnej nie może znacząco odbiegać od układu
 serwisu internetowego.
 Po drugie interfejs powinien być w szczególności dostosowany do smartfonów,
 gdzie powierzchnia ekranu, na której można zaprezentować informacje, jest
 bardzo mała.
 Poniżej znajdują się rysunki prototypów najważniejszych widoków aplikacji
 mobilnej.
\end_layout

\begin_layout Paragraph
Ekran główny/widok kategorii (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.11"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/categories.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp ekranu głównego aplikacji 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.11"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ekran główny aplikacji jest pierwszym na jaki natrafia użytkownik po uruchomieni
u aplikacji.
 Podobnie jak w przypadku serwisu internetowego, znajdują się na nim kafelki
 zawierające zdjęcie i nazwę danej kategorii (1).
 Po wybraniu danej kategorii pojawia się ekran wyboru podkategorii, którego
 wygląd jest identyczny jak widok kategorii.
 W
\begin_inset space ~
\end_inset

górnej części można znaleźć pasek z nazwą aplikacji oraz przyciskiem (2),
 którego wybranie powoduje pojawienie się bocznego paska nawigacyjnego.
\end_layout

\begin_layout Paragraph
Widok wydarzeń (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.12"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/events.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku wydarzeń 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.12"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Użytkownik przechodzi na ten ekran po określeniu interesującej go kategorii
 oraz podkategorii (lub pominięciu wyboru).
 W
\begin_inset space ~
\end_inset

górnej części znajdują się karty (1) służące do przełączania się między
 wydarzeniami organizowanymi przez użytkowników zwykłych, a wydarzeniami
 organizowanymi przez oddziały instytucji.
 Poniżej można znaleźć listę wydarzeń.
 Opis każdego z nich składa się ze zdjęcia (2) oraz krótkiego podsumowania
 najważniejszych informacji (3).
 Po wybraniu wybraniu jednego z wydarzeń użytkownik zostaje przekierowany
 na widok pojedynczego wydarzenia.
\end_layout

\begin_layout Paragraph
Widok pojedynczego wydarzenia (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.13"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/event.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku pojedynczego wydarzenia 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.13"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
W
\begin_inset space ~
\end_inset

górnej części ekranu można znaleźć zdjęcie wydarzenia (1) oraz przyciski
 pozwalające na dołączenie do wydarzenia (2) i prześledzenie dyskusji na
 jego temat (3).
 Poniżej znajduje się nazwa (4; będąc uwierztelnionym jako organizator,
 obok tekstu można znaleźć przyciski umożliwiające edycję i usunięcie wydarzenia
) oraz podsumowanie najważniejszych informacji (5).
 Niżej można znaleźć 3 przyciski.
 Pierwszy z nich to odnośnik do profilu organizatora (6), drugi przenosi
 na widok lokalizacji wydarzenia (7), trzeci natomiast pozwala na przejrzenie
 listy uczestników (8).
 W dolnej części ekran znajduje się szczegółowy opis wydarzenia (9) oraz
 lista jego znaczników (10).
\end_layout

\begin_layout Paragraph
Widok dyskusji (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.14"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/posts.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku dyskusji 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.14"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
W
\begin_inset space ~
\end_inset

górnej części kranu znajduje się formularz pozwalający na dodanie nowej
 wiadomości (1 --- pole tekstowe pozwalające na podanie treści wiadomości;
 2 --- przycisk potwierdzający dodanie wiadomości).
 Poniżej można prześledzić historii dyskusji (3).
 Po wybraniu przez użytkownika wiadomości swojego autorstwa, pojawia się
 okienko dialogowe (4) pozwalające na jej edycję (5 --- pole tekstowe do
 edycji treści; 6 --- anulowanie zmian; 8 --- potwierdzenie zmian) lub usunięcie
 (7).
\end_layout

\begin_layout Paragraph
Widok lokalizacji wydarzenia (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.15"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/localization.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku lokalizacji wydarzenia 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.15"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na
\begin_inset space ~
\end_inset

tym ekranie można znaleźć mapkę okolicy (1) wraz ze znacznikiem (2) wskazującym
 miejsce organizacji wydarzenia.
\end_layout

\begin_layout Paragraph
Widok uczestników wydarzenia (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.16"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/participants.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku uczestników wydarzenia 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.16"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Na
\begin_inset space ~
\end_inset

tym ekranie można znaleźć listę uczestników danego wydarzenia (2).
 Użytkownik znajdując się na tym ekranie ma możliwość zapraszania innych
 użytkowników (opcja ta podobnie jak w przypadku aplikacji internetowej
 jest dostępna dla organizatora lub dla każdego członka wydarzenia, jeżeli
 wyraził na to zgodę organizator).
 W
\begin_inset space ~
\end_inset

górnej części ekranu znajduje się pole tekstowe (1) pozwalające na wyszukanie
 zapraszanego użytkownika.
 Po wpisaniu frazy pojawia się lista znalezionych użytkowników (3) wraz
 z opcją wysłania zaproszenia (4).
\end_layout

\begin_layout Paragraph
Widok profilu użytkownika (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.17"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/user.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku profilu użytkownika 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.17"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
W
\begin_inset space ~
\end_inset

górnej części ekranu profilu użytkownika można znaleźć jego imię i nazwisko
 (1; w przypadku użytkownika zwykłego) lub nazwa (1; w przypadku oddziału
 instytucji), zdjęcie profilowe (2) oraz podstawowe informacje o nim (3).
 Poniżej znajduje się lista trzech ostatnich wydarzeń utworzonych (4) oraz
 uczęszczanych (5; tylko w przypadku profilu użytkownika zwykłego) przez
 danego użytkownika.
 W
\begin_inset space ~
\end_inset

przypadku widoku profilu oddziału można tu także znaleźć odnośnik do ekranu
 dyskusji na jego temat.
\end_layout

\begin_layout Paragraph
Widok zarządzania oddziałami instytucji (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.18"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prototypy/aplikacja_mobilna/branches_administration.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Prototyp widoku zarządzania oddziałami instytucji 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.18"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Podobnie jak w przypadku aplikacji internetowej ekran ten jest dostępny
 tylko dla użytkowników uwierzytelnionych jako instytucja.
 W
\begin_inset space ~
\end_inset

górnej części ekranu można znaleźć przycisk przekierowujący do formularza
 utworzenia nowej jednostki (1).
 Poniżej znajduje się lista oddziałów danej instytucji.
 Opis każdej jednostki składa się ze zdjęcia (2) oraz podsumowania najważniejszy
ch informacji na jej temat.
 Po wybraniu jednej nich pojawi się okienko dialogowe (4) pozwalające na
 podjęcie jednej z 4 akcji: zamknięcie okienka (5), przejście do profilu
 oddziału (6), edycja oddziału (7) lub usunięcie oddziału (8).
\end_layout

\begin_layout Section
Projekt bazy danych
\end_layout

\begin_layout Standard
Projektowanie bazy danych jest procesem odzwierciedlania obiektów świata
 rzeczywistego (a w szczególności zależności w nim występujących) w systemie
 informatycznym.
\end_layout

\begin_layout Subsection
Model związków-encji
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/Logical.png
	scale 50
	rotateAngle 270

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Model związków-encji bazy danych 
\begin_inset CommandInset label
LatexCommand label
name "fig:5.19"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rys.
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:5.19"

\end_inset

 zawiera model związków-encji projektowanej bazy danych przedstawiony przy
 użyciu notacji Barkera.
 Schemat składa się z jedenastu encji powiązanych różnymi związkami.
 Każdy ze związków jest opisany w celu ułatwienia interpretacji schematu.
\end_layout

\begin_layout Standard
Pierwszą encją, na którą należy zwrócić uwagę, jest konto.
 Posiada ona dwa atrybuty i stanowi generalizację najważniejszych cech,
 które będzie posiadało każde konto założone w systemie.
 Konto jest powiązane trzema związkami wyłącznymi typu 1:1 obowiązkowymi
 po obu stronach z encjami użytkownik zwykły, oddział instytucji oraz instytucja.
 Każda z tych encji odpowiada jednemu z trzech typów kont obecnych w systemie.
 Instytucja może posiadać nieskończenie wiele instancji oddziałów instytucji.
 Użytkownik zwykły oraz oddział instytucji musi być powiązany z dokładnie
 jednym wystąpieniem z encji miasto.
 Miasto zaś jest powiązane z encją państwo związkiem 1:N opcjonalnym po
 jednej stronie.
 Użytkownik zwykły może posiadać wiele wydarzeń (poprzez uczestniczenie
 w nich), wydarzenie natomiast może mieć wielu użytkowników zwykłych (jako
 uczestników).
 Wydarzenie ma także jednego organizatora w postaci instancji encji użytkownik
 zwykły lub encji oddział instytucji.
 Może posiadać także nieskończenie wiele znaczników.
 Wydarzenie należy do dokładnie jednej podkategorii, podkategoria zaś musi
 być powiązana z jedną kategorią.
 Ostatnią encją opisywanego modelu jest wiadomość.
 Musi ona posiadać autora (w postaci użytkownika zwykłego lub oddziału instytucj
i) oraz obiekt, którego dotyczy (w postaci wydarzenia lub oddziału instytucji).
\end_layout

\begin_layout Subsection
Model relacyjny
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Model relacyjny bazy danych
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Implementacja
\end_layout

\begin_layout Standard
Implementacja jest kluczową fazą procesu wytwarzania oprogramowania.
 To właśnie na tym etapie dochodzi do konfrontacji założeń projektu aplikacji
 z możliwościami wybranych platform programistycznych.
 Fazę implementacji można podzielić na 3 główne części:
\end_layout

\begin_layout Itemize
implementacja logiki serwera --- obejmuje implementację bazy danych i logiki
 biznesowej aplikacji, powinna zostać dokonana w pierwszej kolejności
\end_layout

\begin_layout Itemize
implementacja aplikacji internetowej po stronie klienta --- obejmuje implementac
ję prostych, czytelnych i spełniających założenia RWD
\begin_inset Foot
status open

\begin_layout Plain Layout
RWD (ang.
 Responsive Web Design) --- technika tworzenia stron internetowych tak,
 aby rozmieszczenie zawartości zmieniało się w zależności od rozmiaru ekranu
 urządzenia, na którym dana strona jest wyświetlana.
\end_layout

\end_inset

 widoków prezentujących dane udostępniane przez serwer, powinna zostać dokonana
 po implementacji logiki serwera
\end_layout

\begin_layout Itemize
implementacja aplikacji mobilnej --- obejmuje implementację wydajnej aplikacji
 skoncentrowanej na prezentacji zasobów serwera w sposób dostosowany głównie
 do urządzeń o małych ekranach, może zostać dokonana w sposób równoległy
 do implementacji aplikacji internetowej
\end_layout

\begin_layout Section
Logika serwera
\end_layout

\begin_layout Subsection
Platforma programistyczna
\end_layout

\begin_layout Paragraph
Architektura
\end_layout

\begin_layout Standard
Ruby on Rails jest platformą opartą na wzorcu projektowym MVC.
 W skład tej architektury wchodzą zatem trzy współpracujące ze sobą komponenty:
 modele, widoki oraz kontrolery.
 Poniżej można znaleźć opis zadań, jakie spełnia każdy z nich:
\end_layout

\begin_layout Itemize
model (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
model
\end_layout

\end_inset

) jest podstawową jednostką logiki biznesowej, jeden model najczęściej odpowiada
 jednej tabeli w bazie danych, a jego atrybuty odzwierciedlają kolumny tej
 tabeli
\end_layout

\begin_layout Itemize
widok (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
view
\end_layout

\end_inset

) odpowiada za prezentacje danych uzyskanych z kontrolera
\end_layout

\begin_layout Itemize
kontroler (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
controller
\end_layout

\end_inset

) składa się z szeregu akcji i odpowiada za definiowanie logiki aplikacji
\end_layout

\begin_layout Standard
Ponadto w opisywanej platformie można wyróżnić jeszcze jeden ważny element
 w postaci trasownika (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
router
\end_layout

\end_inset

).
 Jego zadanie polega na przekierowywaniu adresów URL
\begin_inset Foot
status open

\begin_layout Plain Layout
URL (ang.
 Uniform Resource Locator) --- stosowany w sieci format adresowania zasobów.
\end_layout

\end_inset

 żądań do odpowiednich akcji kontrolera.
 W przypadku opisywanej aplikacji nie został użyty komponent widoku.
 Było to spowodowane wykorzystania platformy do implementacji API, w wyniku
 czego nie zaistniała potrzeba prezentacji danych.
\end_layout

\begin_layout Standard
Interakcja opisanych wyżej komponentów przebiega następująco:
\end_layout

\begin_layout Enumerate
Po wysłaniu żądania przez przeglądarkę następuje odwołanie do odpowiedniej
 akcji kontrolera.
\end_layout

\begin_layout Enumerate
Kontroler wysyła żądanie do modelu, który zaś wykonuje zapytanie do bazy
 danych.
\end_layout

\begin_layout Enumerate
Po otrzymaniu odpowiedzi z bazy danych model odsyła wynik zapytania z powrotem
 do kontrolera.
\end_layout

\begin_layout Enumerate
Po otrzymaniu danych kontroler zwraca je w postaci JSON
\begin_inset Foot
status open

\begin_layout Plain Layout
JSON (ang.
 JavaScript Object Notation) --- format wymiany danych bazujący na języku
 JavaScript.
\end_layout

\end_inset

 bezpośrednio do przeglądarki.
\end_layout

\begin_layout Standard
Rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:6.1"

\end_inset

 stanowi graficzne podsumowanie interakcji komponentów platformy Ruby on
 Rails.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/RoR.png
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat działania architektury platformy Ruby on Rails 
\begin_inset CommandInset label
LatexCommand label
name "fig:6.1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
W trakcie tworzenia aplikacji wykorzystano szereg bibliotek dla platforma
 Ruby on Rails (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
gems
\end_layout

\end_inset

).
 W szczególności warto się przyjrzeć dwom z nich: 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Grape
\end_layout

\end_inset

 i 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Grape Entity
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Grape
\end_layout

\begin_layout Standard
Grape to pomocnicza platforma programistyczna (współpracująca m.in.
 z Ruby on Rails) wspomagająca proces tworzenia interfejsów programistycznych
 opartych na architekturze REST
\begin_inset Foot
status open

\begin_layout Plain Layout
REST (ang.
 Representational State Transfer) --- zmiana stanu poprzez reprezentacje,
 styl architektury aplikacji sieciowych.
 Zastosowanie REST sprzyja zwiększeniu wydajności i łatwiejszemu utrzymaniu
 oprogramowania.
\end_layout

\end_inset

.
 Cechą charakterystyczną tego narzędzia jest możliwość budowania API w sposób
 modułowy, co dodatkowo ułatwia dodawanie kolejnych funkcjonalności.
 Grape umożliwia definiowanie akcji kontrolera jako punkty końcowe (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
endpoints
\end_layout

\end_inset

), gdzie nazwa akcji odpowiada adresowi URL, pod który ma zostać wysłane
 żądanie przeglądarki.
\end_layout

\begin_layout Paragraph
Grape Entity
\end_layout

\begin_layout Standard
Grape Entity jest dodatkiem rozszerzającym działanie platformy Grape o tzw.
 jednostki (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
entities
\end_layout

\end_inset

).
 Jedna jednostka odpowiada najczęściej jednemu modelowi.
 Ułatwiają one konwertowanie instancji modelu na odpowiedź w formacie JSON.
 Grape Entity pozwala w łatwy sposób na określenie, które pola obiektu i
 w jakich przypadkach mają się znajdować w odpowiedzi.
 Można zatem w sposób precyzyjny określić, jakie dane mają być zwracane
 przez dany punkt końcowy.
\end_layout

\begin_layout Subsection
Implementacja bazy danych
\end_layout

\begin_layout Standard
Implementacja bazy danych została dokonana w technologii PostgreSQL.
\end_layout

\begin_layout Subsection
System autoryzacji
\end_layout

\begin_layout Subsection
Interfejs programistyczny aplikacji
\end_layout

\begin_layout Standard
Interfejs programistyczny aplikacji jest podzielony między dziewięcioma
 kontrolerami.
 Poniżej można znaleźć krótki opis wszystkich punktów końcowych w nich zawartych.
 
\end_layout

\begin_layout Paragraph
Kontroler 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
branches
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zawiera punkty końcowe związane z oddziałami.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
GET branches/:id
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

W odpowiedzi zwraca oddział o podanym id.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
POST branches
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Tworzy oddział na podstawie danych zawartych w parametrach żądania.
 W przypadku powodzenia zwraca nowo utworzony oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
PUT branches/:id
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Aktualizuje dane na temat oddziału o podanym id.
 Nowe dane muszą się znajdować w parametrach żądania.
 W przypadku powodzenia zwracany jest zaktualizowany oddział.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
DELETE branches/:id
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Usuwa oddział o podanym id.
\end_layout

\begin_layout Paragraph
Kontroler 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
categories
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zawiera punkty końcowe związane ze zwracaniem kategorii i podkategorii.
\end_layout

\begin_layout Subsection
Testy
\end_layout

\begin_layout Standard
Do testowania interfejsu programistycznego aplikacji została użyta biblioteka
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Rspec
\end_layout

\end_inset

 współpracująca z platformą Ruby on Rails.
\end_layout

\begin_layout Paragraph
Rspec
\end_layout

\begin_layout Paragraph
Testy jednostkowe
\end_layout

\begin_layout Section
Aplikacja internetowa
\end_layout

\begin_layout Subsection
Platforma programistyczna
\end_layout

\begin_layout Paragraph
Architektura
\end_layout

\begin_layout Standard
Platforma Ember.js bazuje na wzorcu projektowym MVC który zakłada istnienie
 trzech współpracujących ze sobą części: modelu, widoku oraz kontrolera.
 Każda z nich realizuje oddzielne zadania i z reguły przekazuje dane do
 kolejnej.
 Ember implementuje każdą z tych części w następujący sposób:
\end_layout

\begin_layout Itemize
trasa (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
route
\end_layout

\end_inset

) odpowiedzialna jest za pobieranie danych z pamięci podręcznej lub serwera
 oraz przekazywanie ich do kontrolera
\end_layout

\begin_layout Itemize
szablon (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
template
\end_layout

\end_inset

) odpowiedzialny jest za prezentację danych pochodzących z kontrolera
\end_layout

\begin_layout Itemize
model (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
model
\end_layout

\end_inset

) odpowiedzialny jest za przechowywanie danych pochodzących z serwera lub
 tymczasowo przechowywanych w pamięci podręcznej
\end_layout

\begin_layout Standard
Interakcja wyżej wymienionych składowych przebiega następująco:
\end_layout

\begin_layout Enumerate
Po wpisaniu adresu URL następuje rozpoznanie obecnego stanu aplikacji przez
 trasownik oraz tym samym wywołanie odpowiedniej akcji pobrania danych w
 trasie.
\end_layout

\begin_layout Enumerate
Trasa pobiera dane pochodzące z serwera lub pamięci podręcznej a następnie
 przekazuje je do kontrolera.
\end_layout

\begin_layout Enumerate
Kontroler w odpowiedni sposób dekoruje dane
\begin_inset Foot
status open

\begin_layout Plain Layout
Dekorować dane oznacza przygotować je w odpowiedni sposób do wyświetlenia.
\end_layout

\end_inset

 lub pozostawia je w niezmienionej formie a następnie przekazuje je do szablonu.
\end_layout

\begin_layout Enumerate
Szablon wyświetla dane.
\end_layout

\begin_layout Standard
W klasycznym schemacie wzorca MVC kontroler pełni rolę trasy.
 W platformie Ember jego zadanie ogranicza się do wykonywania akcji związanych
 z interakcją pomiędzy aplikacją a użytkownikiem.
 Przykładem tego typu interakcji może być wykonanie jakiejś procedury po
 kliknięciu w wybranym miejscu urządzeniem wskazującym.
 Wszelkie akcje dotyczące danych typu: dodanie nowego rekordu, edycja lub
 usuwanie są jednak wykonywane w trasie.
 Kontroler jest zatem odpowiedzialny jedynie za akcje modyfikujące stan
 szablonu, komunikację z trasą oraz dekorowanie danych.
\end_layout

\begin_layout Standard
Trasa wykonuje wszelkie operacje które modyfikują stan bazy danych.
 Odpowiedzialna jest również za interpetację stanu adresu URL czy chociażby
 uwierzytelnianie użytkownika.
 Można zatem powiedzieć że wszelka logika aplikacji która zmienia jej stan
 znajduje się w trasie.
 Istnieje jednak nowe rozwiązanie, które w przyszłości ma całkowicie wykluczyć
 konieczność stosowania kontrolerów współpracujących z trasami.
 W platformie Ember nazywa się to komponentem.
\end_layout

\begin_layout Standard
Komponent umożliwia zdefiniowanie nowego znacznika w języku HTML oraz określenia
 jego zachowania za pomocą języka JavaScript.
 W ten sposób można odizolować pewną funkcjonalność i tym samym umożliwić
 jej wielokrotne wykorzystanie bez dodatkowej implementacji.
 W przypadku tej platformy są one połączeniem funkcjonalności kontrolera
 oraz szablonu.
 Fakt, że komponent implementuje własną logikę oznacza, że kontroler sam
 w sobie traci na znaczeniu i jego zadanie ogranicza się do integracji wielu
 komponentów.
 Prawdopodobnie z tego powodu planowane jest całkowite pozbycie się kontrolerów
 na rzecz komponentów.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement !h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/MVC.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat działania architektury platformy Ember.js
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Ember CLI
\end_layout

\begin_layout Standard
Ember CLI jest narzędziem wiersza poleceń które wprowadza określoną strukturę
 projektu oraz system zarządzający dodatkami.
 Dzięki temu podążając za pewnymi konwencjami programista może uniknąć wielu
 nadmiarowych kwestii implementacyjnych.
 Odpowiednia struktura projektu wymusza określone nazewnictwo plików oraz
 wymaga dodatkowego pliku konfiguracyjnego ale zmniejsza znacznie nakład
 pracy.
 Można zatem powiedzieć że jest to narzędzie, która wprowadza konwencje
 nad konfiguracją dla narzędzi budujących aplikację.
\end_layout

\begin_layout Paragraph
Ember data
\end_layout

\begin_layout Standard
Dane pochodzące z serwera reprezentowane są za pomocą formatu JSON.
 Analiza danych otrzymanych w ten sposób nie byłaby skuteczna ani intuicyjna.
 W tym celu powstała osobna biblioteka której zadaniem jest mapowanie otrzymanyc
h danych na klasy reprezentowane w języku JavaScript.
 Rekord opisany za pomocą klasy jest obecnie najczęściej spotykaną formą
 przechowywania danych w aplikacjach internetowych.
 Ponadto Ember data wprowadza operacje pozwalające na tworzenie, edycję
 oraz usuwanie rekordów.
 Posiadają one pewne konwencje co po raz kolejny udowadnia jak bardzo konwencjon
alną platformą jest Ember.
\end_layout

\begin_layout Paragraph
Emblem
\end_layout

\begin_layout Standard
W celu zdefiniowania struktury strony internetowej należy użyć języka HTML,
 jednak w przypadku gdy chcemy manipulować treścią strony w sposób dynamiczny
 takie rozwiązanie nie wystarczy.
 Ember korzysta z semantycznego systemu szablonów Handlebars, który umożliwia
 w prosty sposób użycie danych pochodzących z obiektów języka JavaScript
 jako zawartości znaczników struktury strony.
 System ten posiada również pewne dyrektywy, które umożliwiają wprowadzenie
 logiki do szablonu, za pomocą chociażby wyrażenia warunkowego 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
if
\end_layout

\end_inset

.
 Istnieje również alternatywne rozwiązanie, które znacznie upraszcza składnie
 HTML wraz z Handlebars.
 Jest to język szablonowy Emblem, który kompiluje się do Handlebars.
\end_layout

\begin_layout Standard
Głównym założeniem Emblem jest uproszczenie składni HTML poprzez używanie
 wcięć w kodzie w momencie zagnieżdżania znaczników oraz pozbycie się znaczników
 zamykających.
 Ponadto jest to język kompatybilny z mechanizmami platformy Ember.
 Ze względu na te zalety, Emblem został użyty w projekcie jako główny język
 szablonów.
\end_layout

\begin_layout Paragraph
CoffeeScript
\end_layout

\begin_layout Standard
CoffeScript jest językiem programowania kompilowanym do JavaScript, który
 został zainspirowany przez trzy inne języki: Python, Ruby oraz Haskell
 .
 Głównym powodem jego stworzenia była chęć skrócenia i zwiększenia czytelności
 kodu napisanego w JavaScript.
 Wprowadza wiele przydatnych metod operujących na listach czy chociażby
 wyrażeniach regularnych.
 Tak jak Emblem jego składnia również opiera się na wcięciach w kodzie co
 znacznie zmniejsza ilość kodu.
 Ponadto jego zaletami jest również zachęcanie do stosowania dobrych i odradzani
a złych wzorców projektowych języka JavaScript.
 Ze względu na wiele pozytywnych aspektów wynikających z wykorzystania CoffeScri
pt, został on użyty w projekcie.
\end_layout

\begin_layout Subsection
Komunikacja z serwerem
\end_layout

\begin_layout Standard
Gdy użytkownik uruchamia aplikację internetową wpisując jej adres URL w
 przeglądarce następuje pobranie plików z kodem HTML, CSS oraz JavaScript,
 które odpowiedzialne są za jej działanie.
 Serwer, który udostępnia te pliki to Node.js
\begin_inset Foot
status open

\begin_layout Plain Layout
Node.js --- środowisko programistyczne napisane w języku JavaScript, które
 umożliwia tworzenie serwerów www.
\end_layout

\end_inset

, będący jednocześnie serwerem bazowym dla Ember CLI.
 Zwrócone w odpowiedzi pliki reprezentują całą aplikację internetową, co
 oznacza, że nie będzie potrzeby komunikacji z serwerem Node aż do czasu
 jej ponownego uruchomienia.
 To rozwiązanie znacznie przyspiesza działanie aplikacji jednak narzuca
 pewne opóźnienie w przypadku jej uruchomienia (co jest efektem konieczności
 pobrania wszystkich plików aplikacji).
 
\begin_inset Float figure
placement !h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/Ember_ server.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Pobranie plików z serwera Node.js.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Prawie każda aplikacja internetowa korzysta z pewnych zasobów, których stan
 w danej chwili powinien być taki sam dla każdego użytkownika.
 Aby zachować tą spójność musi ona współpracować z serwerem, który ma dostęp
 do bazy danych.
 Gdy aplikacja znajduje się już w pamięci przeglądarki internetowej komunikacja
 odbywa się wyłącznie pomiędzy nią a serwerem implementującym logikę.
 Serwer ten ma dostęp do bazy danych, dzięki czemu dane przesyłane do aplikacji
 klienckich są rzeczywiste i nie zakłamane.
 W przypadku platformy Ember komunikacja ta odbywa się przez specjalne adaptery,
 których zadaniem jest konwertowanie danych zapisanych według pewnych formatów
 na takie, które obowiązują w aplikacji internetowej.
 W celu odpowiedniej komunikacji należy stworzyć plik konfiguracyjny, który
 zawiera informacje na temat adresu serwera oraz przestrzeni nazw odpowiedniej
 wersji interfejsu programistycznego.
 
\begin_inset Float figure
placement !h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename schematy/Ember_rails.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ogólny schemat wymiany danych między aplikacją internetową a serwerem.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Każda odpowiedź serwera zawiera dane zwrotne oraz status określający pewien
 stan.
 W przypadku statusów oznaczających niepowodzenie należy odpowiednio poinformowa
ć użytkownika o niemożliwości przetworzenia zadania.
 Zwracane dane trafiają do pamięci podręcznej przeglądarki co pozwala na
 zmniejszenie ilości zapytań do serwera.
\begin_inset Float figure
placement !h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename screenshoty/logowanie_zle_dane.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Przykładowy komunikat ze strony logowania w przypadku statusu oznaczającego
 niepowodzenie.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
System autoryzacji
\end_layout

\begin_layout Standard
W celu spójnej współpracy z serwerem autoryzacja użytkowników w aplikacji
 internetowej została oparta o protokół Oauth2.
 Aby uzyskać sekretny kod będący potwierdzeniem wiarygodności użytkownika,
 należy wysłać dane uwierzytelniające, którymi w tym przypadku jest nazwa
 konta e-mail oraz hasło, do serwera obsługującego uwierzytelnianie (serwer
 Oauth2 jest częścią logiki serwera Ruby on Rails).
 Uzyskany w ten sposób zaszyfrowany kod przechowywany jest w pamięci podręcznej
 oraz wysyłany z każdym zapytaniem.
 
\end_layout

\begin_layout Standard
Aplikacja umożliwia również uwierzytelnienie za pomocą serwisu Facebook,
 który korzysta z tego samego protokołu Oauth2.
 Pierwsze uwierzytelnienie przy pomocy tego serwisu oznacza również rejestrację
 użytkownika za pomocą danych przechwyconych w odpowiedzi serwera.
 W ten sposób zarejestrowany użytkownik w niczym nie różni się od stworzonego
 za pomocą standardowego formularza rejestracyjnego.
\end_layout

\begin_layout Section
Aplikacja mobilna
\end_layout

\begin_layout Subsection
Platforma programistyczna
\end_layout

\begin_layout Subsection
System autoryzacji
\end_layout

\begin_layout Section
Podsumowanie
\end_layout

\begin_layout Chapter
Podsumowanie
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Gajda W., 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Git.
 Rozproszony system kontroli wersji
\end_layout

\end_inset

, Helion, 2013, s.
 13 --- 14
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

System kontroli wersji.
 W: Wikipedia.
 Wolna encyklopedia [on-line] [dostęp 4 stycznia 2016].
 Dostępny w Internecie: https://pl.wikipedia.org/wiki/System_kontroli_wersji
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Wymaganie (inżynieria).
 W: Wikipedia.
 Wolna encyklopedia [on-line] [dostęp 4 stycznia 2016].
 Dostępny w Internecie: https://pl.wikipedia.org/wiki/Wymaganie_%28in%C5%BCynieria
%29
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

Platform as a Service.
 W: Wikipedia.
 Wolna encyklopedia [on-line] [dostęp 4 stycznia 2016].
 Dostępny w Internecie: https://pl.wikipedia.org/wiki/Platform_as_a_Service
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset

CofeeScript.
 W: Wikipedia.
 Wolna encyklopedia [on-line] [dostęp 4 stycznia 2016].
 Dostępny w Internecie: https://en.wikipedia.org/wiki/CoffeeScript
\end_layout

\end_body
\end_document
